/*
 * DSH Tenant Resource Management REST API
 *
 * Resource management API for DSH
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Validations {
    /// Certificate common name
    #[serde(rename = "commonName", skip_serializing_if = "Option::is_none")]
    pub common_name: Option<String>,
    /// Certificate country
    #[serde(rename = "country", skip_serializing_if = "Option::is_none")]
    pub country: Option<String>,
    /// Certificate locality
    #[serde(rename = "locality", skip_serializing_if = "Option::is_none")]
    pub locality: Option<String>,
    /// Certificate organization
    #[serde(rename = "organization", skip_serializing_if = "Option::is_none")]
    pub organization: Option<String>,
    /// Certificate Organizational unit
    #[serde(rename = "organizationalUnit", skip_serializing_if = "Option::is_none")]
    pub organizational_unit: Option<String>,
    /// Certificate province
    #[serde(rename = "province", skip_serializing_if = "Option::is_none")]
    pub province: Option<String>,
    /// Certificate subject Type
    #[serde(rename = "subjectType", skip_serializing_if = "Option::is_none")]
    pub subject_type: Option<String>,
}

impl Validations {
    pub fn new() -> Validations {
        Validations {
            common_name: None,
            country: None,
            locality: None,
            organization: None,
            organizational_unit: None,
            province: None,
            subject_type: None,
        }
    }
}
