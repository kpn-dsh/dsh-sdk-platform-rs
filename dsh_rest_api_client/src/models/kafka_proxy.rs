/*
 * DSH Tenant Resource Management REST API
 *
 * Resource management API for DSH
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct KafkaProxy {
    /// Name of the new Kafka Proxy
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Available networks on this platform
    #[serde(rename = "zone")]
    pub zone: Zone,
    /// CPU quota for each Kafka Proxy (minimum 0.3 = 30% of 1 CPU)
    #[serde(rename = "cpus")]
    pub cpus: f64,
    /// Memory (MB) for each Kafka Proxy (minimum 1024 = 1 GB)
    #[serde(rename = "mem")]
    pub mem: i32,
    /// Number of instances
    #[serde(rename = "instances")]
    pub instances: i32,
    /// Secret name containing the Ca Cert
    #[serde(rename = "secretNameCaChain")]
    pub secret_name_ca_chain: String,
    /// Secret name with the server certificate
    #[serde(rename = "certificate")]
    pub certificate: String,
    /// Set to True no enable Schema Store
    #[serde(rename = "schemaStore", skip_serializing_if = "Option::is_none")]
    pub schema_store: Option<bool>,
    /// CPU quota for Schema Store (minimum 0.3 = 30% of 1 CPU)
    #[serde(rename = "schemaStoreCpus", skip_serializing_if = "Option::is_none")]
    pub schema_store_cpus: Option<f64>,
    /// Memory (MB) for Schema Store (minimum 256MB)
    #[serde(rename = "schemaStoreMem", skip_serializing_if = "Option::is_none")]
    pub schema_store_mem: Option<i32>,
    #[serde(rename = "validations", skip_serializing_if = "Option::is_none")]
    pub validations: Option<Vec<models::Validations>>,
}

impl KafkaProxy {
    pub fn new(
        zone: Zone,
        cpus: f64,
        mem: i32,
        instances: i32,
        secret_name_ca_chain: String,
        certificate: String,
    ) -> KafkaProxy {
        KafkaProxy {
            name: None,
            zone,
            cpus,
            mem,
            instances,
            secret_name_ca_chain,
            certificate,
            schema_store: None,
            schema_store_cpus: None,
            schema_store_mem: None,
            validations: None,
        }
    }
}
/// Available networks on this platform
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Zone {
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "public")]
    Public,
}

impl Default for Zone {
    fn default() -> Zone {
        Self::Internal
    }
}
