/*
 * DSH Tenant Resource Management REST API
 *
 * Resource management API for DSH
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// KafkaProxyValidation : client certificate validations, only non empty values taken in account, no values means no validation
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct KafkaProxyValidation {
    #[serde(rename = "commonName", skip_serializing_if = "Option::is_none")]
    pub common_name: Option<String>,
    #[serde(rename = "country", skip_serializing_if = "Option::is_none")]
    pub country: Option<String>,
    #[serde(rename = "locality", skip_serializing_if = "Option::is_none")]
    pub locality: Option<String>,
    #[serde(rename = "organization", skip_serializing_if = "Option::is_none")]
    pub organization: Option<String>,
    #[serde(rename = "organizationalUnit", skip_serializing_if = "Option::is_none")]
    pub organizational_unit: Option<String>,
    #[serde(rename = "province", skip_serializing_if = "Option::is_none")]
    pub province: Option<String>,
    /// EXACT for exact match, PATTERN for pattern match
    #[serde(rename = "subjectType")]
    pub subject_type: SubjectType,
}

impl KafkaProxyValidation {
    /// client certificate validations, only non empty values taken in account, no values means no validation
    pub fn new(subject_type: SubjectType) -> KafkaProxyValidation {
        KafkaProxyValidation {
            common_name: None,
            country: None,
            locality: None,
            organization: None,
            organizational_unit: None,
            province: None,
            subject_type,
        }
    }
}
/// EXACT for exact match, PATTERN for pattern match
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SubjectType {
    #[serde(rename = "EXACT")]
    Exact,
    #[serde(rename = "PATTERN")]
    Pattern,
}

impl Default for SubjectType {
    fn default() -> SubjectType {
        Self::Exact
    }
}
