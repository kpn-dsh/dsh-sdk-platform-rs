components:
  responses:
    200-AllocationStatus:
      content:
        application/json:
          example:
            derivedFrom: optional URN of optional parent allocation
            notifications: []
            provisioned: true
          schema:
            $ref: '#/components/schemas/AllocationStatus'
      description: status of the allocation
    200-ChildList:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ChildList'
      description: returns a list of ids representing child resources of the requested
        resource
 
  examples:
    dataCatalogAssetBucket:
      description: an example data catalog asset for a bucket
      value:
        kind: bucket
        name: my-bucket
    dataCatalogAssetStatus:
      description: an example DataCatalogAssetStatus
      value:
        actual:
          encrypted: true
          versioned: false
        configuration:
          encrypted: true
          versioned: false
        status:
          notifications: []
          provisioned: true
    dataCatalogAssetWritableStream:
      description: an example data catalog asset for a public writablestream
      value:
        kind: writablestream
        name: stream.my-stream
    bucket:
      description: an example bucket
      value:
        encrypted: true
        versioned: false
    bucketStatus:
      description: an example BucketStatus
      value:
        actual:
          encrypted: true
          versioned: false
        configuration:
          encrypted: true
          versioned: false
        status:
          notifications: []
          provisioned: true
    bucketWatchStatus:
      description: an example BucketWatchStatus
      value:
        actual:
          bucket: twitter-app-bucket
        configuration:
          bucket: twitter-app-bucket
        status:
          notifications: []
          provisioned: true
    bucketaccessactual:
      description: a example BucketAccess as actually deployed
      value:
        bucket: baz
        credentialidentifierref: bucketaccess_baz-shared_identifier
        credentialsecretref: bucketaccess_baz-shared_secret
        name: baz-shared
        readable: true
        writable: true
    bucketaccesswanted:
      description: an example BucketAccess allocation request
      value:
        bucket: baz
        name: baz-shared
        readable: true
        writable: true
    thirdpartybucketConcession:
      description: an example ThirdPartyBucketConcession
      value:
        credentialidentifierref: receivedbucketaccess_bucket-imported-from-foo_identifier
        credentialsecretref: receivedbucketaccess_bucket-imported-from-foo_secret
        name: bucket-imported-from-foo
        readable: true
        shareidentifier: allocation/foo/bucketaccess/baz-shared
        writable: true
    thirdpartybucketConcessionStatus:
      description: an example ThirdPartyBucketConcessionStatus
      value:
        actual:
          credentialidentifierref: receivedbucketaccess_bucket-imported-from-foo_identifier
          credentialsecretref: receivedbucketaccess_bucket-imported-from-foo_secret
          name: bucket-imported-from-foo
          readable: true
          shareidentifier: allocation/foo/bucketaccess/baz-shared
          writable: true
        configuration:
          credentialidentifierref: receivedbucketaccess_bucket-imported-from-foo_identifier
          credentialsecretref: receivedbucketaccess_bucket-imported-from-foo_secret
          name: bucket-imported-from-foo
          shareidentifier: allocation/foo/bucketaccess/baz-shared
        status:
          notifications: []
          provisioned: true
    thirdpartybucketRegistration:
      description: an example thirdpartybucketregistration
      value:
        credentialidentifierplaintext: AIKAsomething
        credentialsecretplaintext: longseeminglyrandomsecretvalue
        name: bucket-imported-from-foo
        shareidentifier: allocation/foo/bucketaccess/baz-shared
    allocationStatus:
      description: an example application
      value:
        derivedFrom: optional URN of optional parent allocation
        notifications: []
        provisioned: true
    appcatalogappconfiguration:
      description: an example appcatalogappconfiguration
      value:
        configuration:
          '@gid': '1674'
          '@uid': '1674'
          LOG_LEVEL: warn
          LOG_LEVEL_MONITOR: warn
          LOG_LEVEL_SERVICE: warn
        manifestUrn: appcatalog/manifest/klarrio/whoami/0.0.1
        name: whoami
        stopped: false
    application:
      description: an example application
      value:
        cpus: 0.1
        env:
          MY_VARIABLE: '{ concat(''I am running on '', variables(''DSH_ENVIRONMENT''),
            '' blank     '') }'
        image: registry.cp.kpn-dsh.com/dshdemo/simpleweb:1.0.0
        instances: 1
        mem: 256
        metrics:
          path: /metrics
          port: 7070
        name: simpleweb-test
        needsToken: true
        readableStreams:
        - stream.airpollution
        - stream.weather
        secrets:
        - injections:
          - env: SATELLITE_API_KEY
          name: satellite-api-key
        singleInstance: true
        topics:
        - duptest
        user: 1673:1673
        writableStreams:
        - stream.metrics
    certificate:
      description: an example certificate
      value:
        certChainSecret: ctest-deployment-certificate
        keySecret: ctest-deployment-key
    certificateStatus:
      description: an example CertificateStatus
      value:
        actual:
          certChainSecret: ctest-deployment-certificate
          keySecret: ctest-deployment-key
        configuration:
          certChainSecret: ctest-deployment-certificate
          keySecret: ctest-deployment-key
        status:
          notifications: []
          provisioned: true
    database:
      description: an example database
      value:
        cpus: 1.0
        extensions: []
        instances: 3
        mem: 2048
        snapshotInterval: 0
        version: ''
        volumeSize: 10
    databaseStatus:
      description: an example databaseStatus
      value:
        actual:
          cpus: 1.0
          extensions: []
          instances: 3
          mem: 2048
          snapshotInterval: 0
          version: ''
          volumeSize: 10
        configuration:
          cpus: 1.0
          extensions: []
          instances: 3
          mem: 2048
          snapshotInterval: 0
          version: ''
          volumeSize: 10
        status:
          notifications: []
          provisioned: true
    defaultKafkaPartitioner:
      description: the default kafka partitioner
      value:
        kind: kafkaDefault
    flinkCluster:
      description: an example flinkCluster
      value:
        jobManager:
          cpus: 0.3
          mem: 1024
        taskManager:
          cpus: 0.3
          instances: 2
          mem: 3072
        version: '1.12'
        zone: public
    flinkClusterStatus:
      description: an example FlinkClusterStatus
      value:
        actual:
          jobManager:
            cpus: 0.3
            mem: 1024
          taskManager:
            cpus: 0.3
            instances: 2
            mem: 3072
          version: '1.12'
          zone: public
        configuration:
          jobManager:
            cpus: 0.3
            mem: 1024
          taskManager:
            cpus: 0.3
            instances: 2
            mem: 3072
          version: '1.12'
          zone: public
        status:
          notifications: []
          provisioned: true
    kafkaProxy:
      description: an example of a Kafka proxy configuration
      value:
        certificate: test-certificate
        cpus: 1.0
        enableKafkaAclGroups: false
        instances: 1
        mem: 1024
        name: test-proxy
        schemaStore: true
        schemaStoreCpus: 0.1
        schemaStoreMem: 256
        secretNameCaChain: test-proxy-ca-chain
        validations:
        - commonName: tenant-common-name
          country: NL
          locality: Rotterdam
          organization: KPN
          organizationalUnit: DSH
          province: Zuid-Holland
          subjectType: EXACT
        zone: public
    managedInternalStream:
      description: a internal managed stream
      value:
        kind: internal
        partitions: 6
        replicationFactor: 3
    managedTenant:
      description: an example managed tenant
      value:
        manager: managing-tenant
        name: a-tenant
        services:
        - enabled: false
          name: vpn
        - enabled: true
          name: monitoring
        - enabled: true
          name: tracing
    managedTenantLimitCertificateCount:
      description: an example of the managed tenant limit for certificates
      value:
        name: certificateCount
        value: 10
    managedTenantLimitConsumerRate:
      description: an example of the managed tenant limit for Kafka consumer rate
        (bytes/s)
      value:
        name: consumerRate
        value: 1048576
    managedTenantLimitCpu:
      description: an example of the managed tenant limit for vCPU quota
      value:
        name: cpu
        value: 0.5
    managedTenantLimitListAll:
      description: an example of all managed tenant limits as a list
      value:
      - name: cpu
        value: 0.5
      - name: mem
        value: 4096
      - name: certificatecount
        value: 10
      - name: secretcount
        value: 10
      - name: topiccount
        value: 10
      - name: partitioncount
        value: 10
      - cname: onsumerrate
        value: 1048576
      - name: producerrate
        value: 1048576
      - name: requestrate
        value: 50
    managedTenantLimitListSome:
      description: an example of some managed tenant limits as a list
      value:
      - name: cpu
        value: 0.5
      - name: mem
        value: 4096
    managedTenantLimitMem:
      description: an example of the managed tenant limit for memory (MiB)
      value:
        name: mem
        value: 4096
    managedTenantLimitPartitionCount:
      description: an example of the managed tenant limit for partitions
      value:
        name: partitionCount
        value: 10
    managedTenantLimitProducerRate:
      description: an example of the managed tenant limit for Kafka producer rate
        (bytes/s)
      value:
        name: producerRate
        value: 1048576
    managedTenantLimitRequestRate:
      description: an example of the managed tenant limit for Kafka request rate (%)
      value:
        name: requestRate
        value: 50
    managedTenantLimitSecretCount:
      description: an example of the managed tenant limit for secrets
      value:
        name: secretCount
        value: 10
    managedTenantLimitTopicCount:
      description: an example of the managed tenant limit for topics
      value:
        name: topicCount
        value: 10
    publicManagedStreamWithDefaultKafkaPartitioner:
      description: a public managed stream with a default kafka partitioner
      value:
        contract:
          $ref: '#/components/examples/publicStreamContractWithDefaultKafkaPartitioner/value'
        kind: public
        partitions: 6
        replicationFactor: 3
    publicManagedStreamWithTopicLevelPartitioner:
      description: a public managed stream with a topic level partitioner
      value:
        contract:
          $ref: '#/components/examples/publicStreamContractWithTopicLevelPartitioner/value'
        kind: public
        partitions: 6
        replicationFactor: 3
    publicStreamContractWithDefaultKafkaPartitioner:
      description: stream contract for a managed public stream with a default kafka
        partitioner
      value:
        canBeRetained: true
        partitioner:
          $ref: '#/components/examples/defaultKafkaPartitioner/value'
    publicStreamContractWithTopicLevelPartitioner:
      description: stream contract for a managed public stream with a topic level
        partitioner
      value:
        canBeRetained: true
        partitioner:
          $ref: '#/components/examples/topicLevelPartitioner/value'
    secret:
      description: an example secret
      value:
        name: secret-name
        value: secret-value
    task:
      description: an example task
      value:
        healthy: true
        host: 10.0.2.36
        lastUpdate: 1639161445
        stagedAt: '2017-12-07T10:53:46.643Z'
        startedAt: '2017-12-07T10:55:41.765Z'
        state: RUNNING
        stoppedAt: '2017-12-07T10:58:41.765Z'
    taskStatus:
      description: an example taskStatus
      value:
        actual:
          healthy: true
          host: 10.0.2.36
          lastUpdate: 1639161445
          stagedAt: '2017-12-07T10:53:46.643Z'
          startedAt: '2017-12-07T10:55:41.765Z'
          state: RUNNING
          stoppedAt: '2017-12-07T10:58:41.765Z'
        configuration:
          healthy: true
          host: 10.0.2.36
          lastUpdate: 1639161445
          stagedAt: '2017-12-07T10:53:46.643Z'
          startedAt: '2017-12-07T10:55:41.765Z'
          state: RUNNING
          stoppedAt: '2017-12-07T10:58:41.765Z'
        status:
          notifications: []
          provisioned: true
    topic:
      description: an example topic
      value:
        partitions: 2
        replicationFactor: 1
    topicLevelPartitioner:
      description: a topic level partitioner
      value:
        kind: topicLevel
        topicLevel: 2
    topicStatus:
      description: an example topicStatus
      value:
        actual:
          partitions: 2
          replicationFactor: 1
        configuration:
          partitions: 2
          replicationFactor: 1
        status:
          notifications: []
          provisioned: true
    volume:
      description: an example volume
      value:
        sizeGiB: 1
    volumeStatus:
      description: an example volumeStatus
      value:
        actual:
          sizeGiB: 1
        configuration:
          sizeGiB: 1
        status:
          notifications: []
          provisioned: true
  parameters:
    DataCatalogAssetKind:
      description: data catalog asset kind
      in: path
      name: kind
      required: true
      schema:
        enum:
        - bucket
        - writablestream
        type: string
    DataCatalogAssetName:
      description: data catalog asset name
      example: my-bucket
      in: path
      name: name
      required: true
      schema:
        type: string
    Tenant:
      description: tenant name
      in: path
      name: tenant
      required: true
      schema:
        type: string
    BucketAccessName:
      description: bucket access name
      example: twitter-app-bucket-readonly
      in: path
      name: name
      required: true
      schema:
        type: string
    BucketId:
      description: bucket name
      example: twitter-app-bucket
      in: path
      name: id
      required: true
      schema:
        type: string
    ThirdPartyBucketId:
      description: your name of choice for the third party bucket
      example: bucket-shared-with-me
      in: path
      name: id
      required: true
      schema:
        type: string
    AppCatalogAppID:
      description: appcatalogapp name
      example: eavesdropper
      in: path
      name: appcatalogappid
      required: true
      schema:
        type: string
    AppID:
      description: application name
      example: simpleweb-test
      in: path
      name: appid
      required: true
      schema:
        type: string
    CertificateId:
      description: certificate name
      example: kafka-proxy-certificate
      in: path
      name: id
      required: true
      schema:
        type: string
    DatabaseId:
      description: database name
      example: db1
      in: path
      name: id
      required: true
      schema:
        type: string
    KafkaACLGroupId:
      description: Kafka ACL group id
      example: kafka-acl-group-id
      in: path
      name: id
      required: true
      schema:
        pattern: '[a-z][a-z0-9-]{1,15}'
        type: string
    KafkaProxyId:
      description: Kafka proxy id
      example: kafka-proxy-id
      in: path
      name: id
      required: true
      schema:
        type: string
    LimitKind:
      description: Limit request type
      example: cpu
      in: path
      name: kind
      required: true
      schema:
        enum:
        - cpu
        - mem
        - certificatecount
        - secretcount
        - topiccount
        - partitioncount
        - consumerrate
        - producerrate
        - requestrate
    ManagedInternalStreamId:
      description: id of the managed stream, including the type prefix
      examples:
        moredata:
          summary: internal stream called `moredata` for tenant `tnanet`
          value: internal.tnanet---moredata
      in: path
      name: streamId
      required: true
      schema:
        $ref: '#/components/schemas/ManagedInternalStreamId'
    ManagedPublicStreamId:
      description: id of the managed stream, including the type prefix
      examples:
        awesomedata:
          summary: public stream called `awesomedata` for tenant `tnanet`
          value: stream.tnanet---awesomedata
        evenmoredata:
          summary: public stream called `evenmoredata` for tenant `tnanet`
          value: stream.tnanet---evenmoredata
      in: path
      name: streamId
      required: true
      schema:
        $ref: '#/components/schemas/ManagedPublicStreamId'
    ManagedStreamId:
      description: id of the managed stream, including the type prefix
      examples:
        awesomedata:
          summary: public stream called `awesomedata` for tenant `tnanet`
          value: stream.tnanet---awesomedata
        evenmoredata:
          summary: public stream called `evenmoredata` for tenant `tnanet`
          value: stream.tnanet---evenmoredata
        moredata:
          summary: internal stream called `moredata` for tenant `tnanet`
          value: internal.tnanet---moredata
      in: path
      name: streamId
      required: true
      schema:
        $ref: '#/components/schemas/ManagedStreamId'
    Manager:
      description: Name of the tenant that is acting as manager for this request
      example: manager-tenant
      in: path
      name: manager
      required: true
      schema:
        type: string
    SecretId:
      description: secret name
      example: proximity-certificate-key
      in: path
      name: id
      required: true
      schema:
        type: string
    TaskId:
      description: task name
      example: dbfa9cdc-b9dc-11eb-9cb4-70b3d5800002
      in: path
      name: id
      required: true
      schema:
        type: string
    TopicId:
      description: topic name
      example: flinkjob-input
      in: path
      name: id
      required: true
      schema:
        type: string
    VolumeId:
      description: volume name
      example: flinkjob-store
      in: path
      name: id
      required: true
      schema:
        type: string
  schemas:
    AllocationStatus:
      properties:
        derivedFrom:
          description: 'pointer to the parent allocation or limit that caused this
            allocation to be implicitly created

            '
          type: string
        notifications:
          items:
            $ref: '#/components/schemas/Notification'
          type: array
        provisioned:
          description: indicates whether configuration and actual state match
          type: boolean
      required:
      - provisioned
      - notifications
      type: object
    ChildList:
      items:
        type: string
      type: array
    DataCatalogAsset:
      properties:
        kind:
          type: string
        name:
          type: string
      required:
      - kind
      - name
      type: object
    DataCatalogAssetStatus:
      properties:
        actual:
          $ref: '#/components/schemas/DataCatalogAsset'
        configuration:
          $ref: '#/components/schemas/DataCatalogAsset'
        status:
          $ref: '#/components/schemas/AllocationStatus'
      required:
      - status
      type: object
    Bucket:
      properties:
        encrypted:
          type: boolean
        versioned:
          type: boolean
      required:
      - encrypted
      - versioned
      type: object
    BucketAccess:
      properties:
        bucket:
          type: string
        credentialidentifierref:
          type: string
        credentialsecretref:
          type: string
        name:
          type: string
        readable:
          type: boolean
        writable:
          type: boolean
      required:
      - name
      - bucket
      - readable
      - writable
      - credentialidentifierref
      - credentialsecretref
      type: object
    BucketAccessConfiguration:
      properties:
        bucket:
          type: string
        name:
          type: string
        readable:
          type: boolean
        writable:
          type: boolean
      required:
      - name
      - bucket
      - readable
      - writable
      type: object
    BucketAccessStatus:
      properties:
        actual:
          $ref: '#/components/schemas/BucketAccess'
        configuration:
          $ref: '#/components/schemas/BucketAccessConfiguration'
        status:
          $ref: '#/components/schemas/AllocationStatus'
      required:
      - status
      type: object
    BucketStatus:
      properties:
        actual:
          $ref: '#/components/schemas/Bucket'
        configuration:
          $ref: '#/components/schemas/Bucket'
        status:
          $ref: '#/components/schemas/AllocationStatus'
      required:
      - status
      type: object
    BucketWatch:
      properties:
        bucket:
          type: string
      required:
      - bucket
      type: object
    BucketWatchStatus:
      properties:
        actual:
          $ref: '#/components/schemas/BucketWatch'
        configuration:
          $ref: '#/components/schemas/BucketWatch'
        status:
          $ref: '#/components/schemas/AllocationStatus'
      required:
      - status
      type: object
    ReceivedBucketAccess:
      $ref: '#/components/schemas/ThirdPartyBucketConcession'
    ReceivedBucketAccessStatus:
      $ref: '#/components/schemas/ThirdPartyBucketConcessionStatus'
    ThirdPartyBucketConcession:
      properties:
        credentialidentifierref:
          type: string
        credentialsecretref:
          type: string
        name:
          description: your name for this bucket owned by a third party
          type: string
        readable:
          type: boolean
        shareidentifier:
          type: string
        writable:
          type: boolean
      required:
      - name
      - readable
      - writable
      - credentialidentifierref
      - credentialsecretref
      - shareidentifier
      type: object
    ThirdPartyBucketConcessionConfiguration:
      properties:
        name:
          description: your name for this bucket owned by a third party
          type: string
        shareidentifier:
          type: string
      required:
      - name
      - shareidentifier
      type: object
    ThirdPartyBucketConcessionRegistration:
      properties:
        credentialidentifierplaintext:
          description: plaintext credential identifier provided to you by the third
            party
          type: string
        credentialsecretplaintext:
          description: plaintext secret value provided to you by the third party
          type: string
        name:
          description: the name you give to the third party bucket you are registering
          type: string
        shareidentifier:
          description: provided to you by the third party
          type: string
      required:
      - name
      - shareidentifier
      - credentialidentifierplaintext
      - credentialsecretplaintext
      type: object
    ThirdPartyBucketConcessionStatus:
      properties:
        actual:
          $ref: '#/components/schemas/ThirdPartyBucketConcession'
        configuration:
          $ref: '#/components/schemas/ThirdPartyBucketConcessionConfiguration'
        status:
          $ref: '#/components/schemas/AllocationStatus'
      required:
      - status
      type: object
    ActualCertificate:
      allOf:
      - $ref: '#/components/schemas/Certificate'
      - properties:
          distinguishedName:
            type: string
          dnsNames:
            items:
              type: string
            type: array
          notAfter:
            format: date-time
            type: string
          notBefore:
            format: date-time
            type: string
          serialNumber:
            type: string
        required:
        - serialNumber
        - notBefore
        - notAfter
        - distinguishedName
        - dnsNames
        type: object
      description: information on a certificate which is provisioned on the platform
      type: object
    AppCatalogApp:
      properties:
        configuration:
          type: string
        manifestUrn:
          type: string
        name:
          type: string
        resources:
          additionalProperties:
            oneOf:
            - $ref: '#/components/schemas/Application'
            - $ref: '#/components/schemas/Bucket'
            - $ref: '#/components/schemas/Certificate'
            - $ref: '#/components/schemas/Secret'
            - $ref: '#/components/schemas/Topic'
            - $ref: '#/components/schemas/Vhost'
            - $ref: '#/components/schemas/Volume'
          description: child resources
          type: object
      required:
      - name
      - manifestUrn
      - resources
      type: object
    AppCatalogAppConfiguration:
      properties:
        configuration:
          additionalProperties:
            type: string
          description: configuration parameters to be used in AppCatalog manifest
          type: object
        manifestUrn:
          type: string
        name:
          type: string
        stopped:
          type: boolean
      required:
      - name
      - manifestUrn
      - stopped
      - configuration
      type: object
    AppCatalogManifest:
      properties:
        draft:
          type: boolean
        lastModified:
          description: creation timestamp of the secret
          type: number
        payload:
          type: string
      required:
      - lastModified
      - payload
      - draft
      type: object
    Application:
      properties:
        cpus:
          description: How many CPUs this application needs (0.5 = 50% of 1 cpu)
          type: number
        env:
          additionalProperties:
            type: string
          description: Environment variables
          type: object
        exposedPorts:
          additionalProperties:
            $ref: '#/components/schemas/PortMapping'
          description: Exposes ports of your application outside the platform
          type: object
        healthCheck:
          $ref: '#/components/schemas/HealthCheck'
        image:
          description: The container image to launch
          format: docker_repo/tag:version
          type: string
        instances:
          default: 1
          description: Number of instances that need to be spun up for this app
          minimum: 0
          type: integer
        mem:
          description: Amount of memory your application needs in MB
          minimum: 0
          type: integer
        metrics:
          $ref: '#/components/schemas/Metrics'
        needsToken:
          default: true
          description: 'If true, the platform will provision a secret token in the
            `DSH_SECRET_TOKEN` environment variable. This token can be exchanged for
            a client certificate that can be used for authentication to, amongst others,
            the Kafka brokers.

            '
          type: boolean
        readableStreams:
          description: names of streams to which the application needs read access.
          items:
            type: string
          type: array
        secrets:
          items:
            $ref: '#/components/schemas/ApplicationSecret'
          type: array
        singleInstance:
          default: false
          description: 'If true, the platform will ensure that there is always at
            most one instance of this application running at the same time. This impacts
            restart and upgrade behavior: A single-instance application will be terminated
            before a replacement is started, whereas an application that is not single-instance
            will remain running until its replacement has started and reports healthy.
            **Note** Applications that define volumes are always implicitly treated
            as single-instance, even if this flag is not set.'
          type: boolean
        spreadGroup:
          description: The spread group - if any - to be used to ensure instances
            of one or more applications are not scheduled onto the same node.
          type: string
        topics:
          description: names of scratch topics to which the application needs access.
          items:
            type: string
          type: array
        user:
          description: The userid:groupid combination used to start the application
            container.
          format: userid:groupid
          type: string
        volumes:
          additionalProperties:
            properties:
              name:
                description: the full name of the volume that needs to be mounted
                  in the container.
                type: string
            required:
            - name
            type: object
          description: The volumes to be mounted in the container. The dictionary
            key is the mount point.
          type: object
        writableStreams:
          description: names of streams to which the application needs write access.
          items:
            type: string
          type: array
      required:
      - image
      - user
      - cpus
      - mem
      type: object
    ApplicationSecret:
      description: a secret to be injected as an environment variable in the application
      properties:
        injections:
          description: a list of environment variable names. The secret's value may
            be injected multiple times as different environment variables, so multiple
            environment variable names for the same secret can be provided
          items:
            additionalProperties:
              type: string
            type: object
          type: array
        name:
          description: the secret's name
          type: string
      required:
      - name
      - injections
      type: object
    BaseLimitValue:
      properties:
        name:
          enum:
          - cpu
          - mem
          - certificateCount
          - secretCount
          - topicCount
          - partitionCount
          - consumerRate
          - producerRate
          - requestRate
          type: string
      required:
      - name
      type: object
    Certificate:
      description: information on a certificate which is wanted on the platform but
        may not yet be provisioned
      properties:
        certChainSecret:
          type: string
        keySecret:
          type: string
        passphraseSecret:
          type: string
      required:
      - keySecret
      - certChainSecret
      type: object
    CertificateStatus:
      properties:
        actual:
          $ref: '#/components/schemas/ActualCertificate'
        configuration:
          $ref: '#/components/schemas/Certificate'
        status:
          $ref: '#/components/schemas/AllocationStatus'
      required:
      - status
      type: object
    ClientSecret:
      properties:
        createdDate:
          description: creation timestamp of the secret
          type: number
        value:
          description: the secret value
          type: string
      required:
      - value
      type: object
    Database:
      properties:
        cpus:
          example: 1.0
          minimum: 0.5
          type: number
        extensions:
          example:
          - postgis
          - postgres_fdw
          - uuid-ossp
          items:
            type: string
          type: array
        instances:
          example: 3
          minimum: 3
          type: integer
        mem:
          example: 3072
          minimum: 2048
          type: integer
        snapshotInterval:
          example: 3600
          minimum: 3600
          type: integer
        version:
          example: 2.11.1.0-8
          type: string
        volumeSize:
          example: 10
          minimum: 10
          type: integer
      required:
      - instances
      - cpus
      - mem
      - volumeSize
      type: object
    DatabaseStatus:
      properties:
        actual:
          $ref: '#/components/schemas/Database'
        configuration:
          $ref: '#/components/schemas/Database'
        status:
          $ref: '#/components/schemas/AllocationStatus'
      required:
      - status
      type: object
    Empty:
      additionalProperties: false
      properties: {}
      type: object
    FlinkCluster:
      properties:
        jobManager:
          $ref: '#/components/schemas/FlinkJobManager'
        taskManager:
          $ref: '#/components/schemas/FlinkTaskManager'
        version:
          description: Flink version
          type: string
        zone:
          description: Network zone this cluster needs to run in. /components/schemas/Zone
            contains a list of available network zones in this platform.
          type: string
      required:
      - version
      - zone
      type: object
    FlinkClusterStatus:
      properties:
        actual:
          $ref: '#/components/schemas/FlinkCluster'
        configuration:
          $ref: '#/components/schemas/FlinkCluster'
        status:
          $ref: '#/components/schemas/AllocationStatus'
      required:
      - status
      type: object
    FlinkJobManager:
      properties:
        cpus:
          description: CPU quota for the Flink job manager (minimum 0.3 = 30% of 1
            CPU)
          example: 0.3
          minimum: 0.3
          type: number
        mem:
          description: Memory (MB) for this Flink job manager (minimum 1024 = 1 GB)
          example: 1024
          minimum: 1024
          type: integer
      required:
      - cpus
      - mem
      type: object
    FlinkTaskManager:
      properties:
        cpus:
          description: CPU quota for each Flink task manager (minimum 0.3 = 30% of
            1 CPU)
          example: 0.3
          minimum: 0.3
          type: number
        instances:
          description: Number of Flink task managers (minimum 1)
          example: 2
          minimum: 1
          type: integer
        mem:
          description: Memory (MB) for each Flink task manager (minimum 1024 = 1 GB)
          example: 3072
          minimum: 1024
          type: integer
      required:
      - cpus
      - mem
      - instances
      type: object
    HealthCheck:
      properties:
        path:
          default: /
          description: 'The HTTP path for the health check

            '
          type: string
        port:
          default: 7070
          description: 'The TCP port for the health check

            '
          minimum: 0
          type: integer
        protocol:
          description: 'The protocol for for the health check (http or https)

            '
          enum:
          - http
          - https
          type: string
      type: object
    InternalManagedStream:
      allOf:
      - $ref: '#/components/schemas/Topic'
      - properties:
          kind:
            description: For internal streams, the value of `kind` must be `internal.`
            enum:
            - internal
            type: string
        required:
        - kind
        type: object
      description: 'An internal stream.  A stream that can be shared between different
        tenants, but is not accessible over the MQTT protocol adapter.

        '
      example:
        $ref: '#/components/examples/managedInternalStream'
      type: object
    KafkaAclGroup:
      description: information about a Kafka ACL group
      example:
        readableStreams:
        - kind: topic
          name: readable-topic-1
        - kind: public
          name: readable-topic-2
        writableStreams:
        - kind: topic
          name: writeable-topic-1
        - kind: internal
          name: writeable-topic-2
      properties:
        readableStreams:
          items:
            $ref: '#/components/schemas/KafkaAclGroupTopic'
          type: array
        writableStreams:
          items:
            $ref: '#/components/schemas/KafkaAclGroupTopic'
          type: array
      type: object
    KafkaAclGroupTopic:
      description: Kafka ACL group topic definition
      properties:
        kind:
          enum:
          - topic
          - internal
          - public
          type: string
        name:
          description: topic name
          type: string
      required:
      - name
      - kind
      type: object
    KafkaProperties:
      additionalProperties:
        type: string
      description: "Additional Kafka properties to be set on the topic. The properties\
        \ are key-value pairs.\nThe key is the property name and the value is the\
        \ property value.  The following properties are allowed:\n  - `cleanup.policy`:\
        \ `delete|compact`\n  - `compression.type`: `uncompressed|zstd|lz4|snappy|gzip|producer`\n\
        \  - `delete.retention.ms`: min 0\n  - `max.message.bytes`: min `1024`, max\
        \ `1048576` (1024x1024)\n  - `message.timestamp.type`: `CreateTime|LogAppendTime`\n\
        \  - `retention.bytes` min 0\n  - `retention.ms` min `3600000` (1 hour), max:\
        \ `3,1536E+10` (365 days)\n  - `segment.bytes`: min `52428800` (1024x1024x50)\n"
      type: object
    KafkaProxy:
      properties:
        certificate:
          description: Secret name with the server certificate
          type: string
        cpus:
          description: CPU quota for each Kafka Proxy (minimum 0.3 = 30% of 1 CPU)
          example: 0.3
          minimum: 0.3
          type: number
        enableKafkaAclGroups:
          description: 'Set to True to enable the ACL groups (Advanced feature: without
            the correct acl groups in place this will result in a non-functioning
            proxy instance)

            '
          type: boolean
        instances:
          description: Number of instances
          example: 2
          minimum: 1
          type: integer
        mem:
          description: Memory (MB) for each Kafka Proxy (minimum 1024 = 1 GB)
          example: 3072
          minimum: 1024
          type: integer
        name:
          description: Name of the new Kafka Proxy
          type: string
        schemaStore:
          description: Set to True no enable Schema Store
          type: boolean
        schemaStoreCpus:
          description: CPU quota for Schema Store (minimum 0.3 = 30% of 1 CPU)
          example: 0.1
          minimum: 0.1
          type: number
        schemaStoreMem:
          description: Memory (MB) for Schema Store (minimum 256MB)
          example: 256
          minimum: 256
          type: integer
        secretNameCaChain:
          description: Secret name containing the Ca Cert
          type: string
        validations:
          items:
            $ref: '#/components/schemas/Validations'
          type: array
        zone:
          description: Available networks on this platform
          enum:
          - private
          - public
          type: string
      required:
      - cpus
      - mem
      - instances
      - zone
      - secretNameCaChain
      - certificate
      type: object
    KafkaProxyStatus:
      properties:
        configuration:
          $ref: '#/components/schemas/KafkaProxy'
        status:
          $ref: '#/components/schemas/AllocationStatus'
      required:
      - status
      type: object
    KafkaProxyValidation:
      description: client certificate validations, only non empty values taken in
        account, no values means no validation
      properties:
        commonName:
          type: string
        country:
          type: string
        locality:
          type: string
        organization:
          type: string
        organizationalUnit:
          type: string
        province:
          type: string
        subjectType:
          description: EXACT for exact match, PATTERN for pattern match
          enum:
          - EXACT
          - PATTERN
          type: string
      required:
      - subjectType
      type: object
    LimitValue:
      discriminator:
        mapping:
          certificateCount: '#/components/schemas/LimitValueCertificateCount'
          consumerRate: '#/components/schemas/LimitValueConsumerRate'
          cpu: '#/components/schemas/LimitValueCpu'
          kafkaAclGroupCount: '#/components/schemas/LimitValueKafkaAclGroupCount'
          mem: '#/components/schemas/LimitValueMem'
          partitionCount: '#/components/schemas/LimitValuePartitionCount'
          producerRate: '#/components/schemas/LimitValueProducerRate'
          requestRate: '#/components/schemas/LimitValueRequestRate'
          secretCount: '#/components/schemas/LimitValueSecretCount'
          topicCount: '#/components/schemas/LimitValueTopicCount'
        propertyName: name
      oneOf:
      - $ref: '#/components/schemas/LimitValueCpu'
      - $ref: '#/components/schemas/LimitValueMem'
      - $ref: '#/components/schemas/LimitValueCertificateCount'
      - $ref: '#/components/schemas/LimitValueSecretCount'
      - $ref: '#/components/schemas/LimitValueTopicCount'
      - $ref: '#/components/schemas/LimitValuePartitionCount'
      - $ref: '#/components/schemas/LimitValueConsumerRate'
      - $ref: '#/components/schemas/LimitValueProducerRate'
      - $ref: '#/components/schemas/LimitValueRequestRate'
      - $ref: '#/components/schemas/LimitValueKafkaAclGroupCount'
    LimitValueCertificateCount:
      allOf:
      - $ref: '#/components/schemas/BaseLimitValue'
      - properties:
          value:
            description: The number of certificates available for the managed tenant
            maximum: 40
            minimum: 1
            type: integer
        required:
        - value
        type: object
    LimitValueConsumerRate:
      allOf:
      - $ref: '#/components/schemas/BaseLimitValue'
      - properties:
          value:
            description: The maximum allowed consumer rate (bytes/sec)
            maximum: 1250000000
            minimum: 1048576
            type: integer
        required:
        - value
        type: object
    LimitValueCpu:
      allOf:
      - $ref: '#/components/schemas/BaseLimitValue'
      - properties:
          value:
            description: The number of CPUs to provision for the managed tenant (factions
              of a vCPU core, 1.0 equals 1 vCPU)
            maximum: 16.0
            minimum: 0.01
            multipleOf: 0.01
            type: number
        required:
        - value
        type: object
    LimitValueKafkaAclGroupCount:
      allOf:
      - $ref: '#/components/schemas/BaseLimitValue'
      - properties:
          value:
            description: The number of Kafka ACL groups available for the managed
              tenant
            maximum: 50
            minimum: 0
            type: integer
        required:
        - value
        type: object
    LimitValueMem:
      allOf:
      - $ref: '#/components/schemas/BaseLimitValue'
      - properties:
          value:
            description: The amount of memory available for the managed tenant (MiB)
            maximum: 131072
            minimum: 1
            type: integer
        required:
        - value
        type: object
    LimitValuePartitionCount:
      allOf:
      - $ref: '#/components/schemas/BaseLimitValue'
      - properties:
          value:
            description: The number of partitions available for the managed tenant
            maximum: 40
            minimum: 1
            type: integer
        required:
        - value
        type: object
    LimitValueProducerRate:
      allOf:
      - $ref: '#/components/schemas/BaseLimitValue'
      - properties:
          value:
            description: The maximum allowed producer rate (bytes/sec)
            maximum: 1250000000
            minimum: 1048576
            type: integer
        required:
        - value
        type: object
    LimitValueRequestRate:
      allOf:
      - $ref: '#/components/schemas/BaseLimitValue'
      - properties:
          value:
            description: The maximum allowed request rate (%)
            maximum: 100
            minimum: 1
            type: integer
        required:
        - value
        type: object
    LimitValueSecretCount:
      allOf:
      - $ref: '#/components/schemas/BaseLimitValue'
      - properties:
          value:
            description: The number of secrets available for the managed tenant
            maximum: 40
            minimum: 1
            type: integer
        required:
        - value
        type: object
    LimitValueTopicCount:
      allOf:
      - $ref: '#/components/schemas/BaseLimitValue'
      - properties:
          value:
            description: The number of topics available for the managed tenant
            maximum: 40
            minimum: 1
            type: integer
        required:
        - value
        type: object
    ManagedInternalStreamId:
      description: "The id of a managed stream consists of a `internal.` prefix followed\
        \ by the name of the managing tenant and the name of the stream separated\
        \ by `---` (three hyphens).  \nid's starting with `internal` indicate an internal\
        \ stream.\nFor an internal stream called `maerts` for tenant `tnanet` with\
        \ an assigned managing prefix `tna` the full name would be `internal.tna---maerts`\n\
        For a public stream with the same name and tenant,  the full name would be\
        \ `stream.tna---maerts`.\nNote that the regular expressions below don't cover\
        \ all restrictions.  The tenant name part must still adhere to the rules for\
        \ tenant names, the stream name part must still adhere to the following rules:\
        \ - Must have a minimum length of 3 and a maximum length of 100, - Must only\
        \ contain lower case alphanumerical characters `[a-z0-9]` and hyphens `-`,\
        \ - Must not contain three sequential hyphens `---`, two sequential hyphens\
        \ is fine, - Must start with an lowercase letter `^[a-z]` - Must end with\
        \ a lowercase letter or digit `[a-z0-9]$`\n"
      pattern: ^(internal)\.[a-z][a-z0-9-]{0,38}[a-z]---[a-z][a-z0-9-]{1,98}[a-z0-9]$
      type: string
    ManagedPublicStreamId:
      description: "The id of a managed stream consists of a `stream.` or `internal.`\
        \ prefix followed by a managing prefix set specifically as a limit for each\
        \ managing tenant, and name of the stream. The managing prefix and the name\
        \ are separated by `---` (three hyphens).  \nId's starting with `stream` indicate\
        \ a public stream,  id's starting with `internal` indicate an internal stream.\n\
        For an internal stream called `maerts` for tenant `tnanet` with an assigned\
        \ managing prefix `tna` the full name would be `internal.tna---maerts`\nFor\
        \ a public stream with the same name and tenant,  the full name would be `stream.tna---maerts`.\n\
        Note that the regular expressions below don't cover all restrictions.  The\
        \ tenant name part must still adhere to the rules for tenant names, the stream\
        \ name part must still adhere to the following rules: - Must have a minimum\
        \ length of 3 and a maximum length of 100, - Must only contain lower case\
        \ alphanumerical characters `[a-z0-9]` and hyphens `-`, - Must not contain\
        \ three sequential hyphens `---`, two sequential hyphens is fine, - Must start\
        \ with an lowercase letter `^[a-z]` - Must end with a lowercase letter or\
        \ digit `[a-z0-9]$`\n"
      pattern: ^(stream)\.[a-z][a-z0-9-]{0,38}[a-z]---[a-z][a-z0-9-]{1,98}[a-z0-9]$
      type: string
    ManagedStreamId:
      description: "The id of a managed stream consists of a `stream.` or `internal.`\
        \ prefix followed by a managing prefix set specifically as a limit for each\
        \ managing tenant, and name of the stream. The managing prefix and the name\
        \ are separated by `---` (three hyphens).  \nId's starting with `stream` indicate\
        \ a public stream,  id's starting with `internal` indicate an internal stream.\n\
        For an internal stream called `maerts` for tenant `tnanet` with an assigned\
        \ managing prefix `tna` the full name would be `internal.tna---maerts`\nFor\
        \ a public stream with the same name and tenant,  the full name would be `stream.tna---maerts`.\n\
        Note that the regular expressions below don't cover all restrictions.  The\
        \ tenant name part must still adhere to the rules for tenant names, the stream\
        \ name part must still adhere to the following rules: - Must have a minimum\
        \ length of 3 and a maximum length of 100, - Must only contain lower case\
        \ alphanumerical characters `[a-z0-9]` and hyphens `-`, - Must not contain\
        \ three sequential hyphens `---`, two sequential hyphens is fine, - Must start\
        \ with an lowercase letter `^[a-z]` - Must end with a lowercase letter or\
        \ digit `[a-z0-9]$`\n"
      pattern: ^(stream|internal)\.[a-z][a-z0-9-]{0,38}[a-z]---[a-z][a-z0-9-]{1,98}[a-z0-9]$
      type: string
    ManagedTenant:
      properties:
        manager:
          description: "Name of the tenant that is acting as manager for this tenant.\
            \  \nMust be identical to the `manager` parameter in the path.\n"
          type: string
        name:
          description: Name of the tenant.  Must be identical to the tenant name used
            in the path.
          type: string
        services:
          default:
          - enabled: true
            name: monitoring
          - enabled: false
            name: vpn
          - enabled: false
            name: tracing
          description: "List of services that are enabled for this tenant.  At this\
            \ point, `monitoring` is a requirement (it's \n`enabled` value must be\
            \ `true`).  The default values for `tracing` and `vpn` are both `false`.\
            \  The `vpn`\nservice is only available on some platforms.  Requesting\
            \ it on a platform that doesn't support it will \ncause the request to\
            \ be rejected.\n"
          items:
            properties:
              enabled:
                type: boolean
              name:
                enum:
                - vpn
                - tracing
                - monitoring
                type: string
            required:
            - name
            - enabled
            type: object
          type: array
      required:
      - name
      - manager
      type: object
    Metrics:
      description: metrics endpoint which will be scraped by the platform.
      properties:
        path:
          default: /metrics
          description: 'The HTTP path for the metrics endpoint

            '
          type: string
        port:
          default: 7070
          description: 'The TCP port for the metrics endpoint

            '
          minimum: 0
          type: integer
      type: object
    Notification:
      properties:
        args:
          additionalProperties:
            type: string
          type: object
        message:
          type: string
        remove:
          description: true if the notification has to do with removal of the allocation,
            false if it relates to creation/update of the resource
          type: boolean
      required:
      - remove
      - message
      type: object
    PathSpec:
      properties:
        prefix:
          description: The path prefix (starting with `/`, ending without `/`) that
            will be matched for routing to this service.
          type: string
      required:
      - prefix
      type: object
    PortMapping:
      properties:
        auth:
          description: TODO
          type: string
        mode:
          description: "Routing mode. The allowed values are:\n  * `http` (default\
            \ if this property is omitted). HTTP routing and TLS termination are done\
            \ by the platform. In this case, the `tls` and (optionally) `paths` settings\
            \ should be configured as well.\n  * `tcp/<endpoint>`. The platform only\
            \ does plain TCP routing, with TLS pass-through. When set, the `tls` and\
            \ `paths` settings are ignored. The application is responsible for TLS\
            \ termination and certificate management. There are various possible values\
            \ for `<endpoint>` that may appear when listing allocation configurations,\
            \ but the only value that is allowed to be set in regular application\
            \ allocations is `tcp/https`.\n    * `tcp/https`. Any traffic arriving\
            \ on `<vhost>:443` will be forwarded (TLS included) to the service.\n\
            \    * `tcp/kafka-proxy` is used by Kafka Proxies. This endpoint is auto-configured\
            \ by the platform when allocating a Kafka Proxy application and should\
            \ *not* be used when allocating regular applications.\n    * `tcp/vpn-tcp`\
            \ is used by a VPN application. This endpoint is auto-configured by the\
            \ platform when allocating a VPN application and should *not* be used\
            \ when allocating regular applications.\n"
          type: string
        paths:
          description: The paths which are allowed on the associated vhost
          items:
            $ref: '#/components/schemas/PathSpec'
          type: array
        serviceGroup:
          description: To load balance traffic between different services, use this
            optional field to put those services in the same service group. Choose
            any name consisting of all lowercase letters.
          type: string
        tls:
          description: The default is 'auto', indicating that the port will only accept
            secured connections. Put this to 'none' if you do not want the service
            to have a secure endpoint.
          enum:
          - auto
          - none
          type: string
        vhost:
          description: The host name that needs to be assigned to this port (for multiple
            names, separate them with commas)
          type: string
        whitelist:
          description: Put ip addresses or ip ranges that can call this service here
            (for multiple addresses, separate them with spaces)
          type: string
      type: object
    PublicManagedStream:
      allOf:
      - $ref: '#/components/schemas/Topic'
      - properties:
          contract:
            $ref: '#/components/schemas/PublicManagedStreamContract'
          kind:
            description: For public streams, the value of `kind` must be `public`
            enum:
            - public
            type: string
        required:
        - contract
        - kind
        type: object
      description: 'A public stream.  A stream that can be shared between different
        tenants within the DSH platform, and is accessible over the MQTT protocol
        adapter. A public stream requires a stream contract.

        '
      example:
      - $ref: '#/components/examples/publicManagedStreamWithTopicLevelPartitioner'
      - $ref: '#/components/examples/publicManagedStreamWithDefaultKafkaPartitioner'
      type: object
    PublicManagedStreamContract:
      description: The stream contract for a public stream.
      example:
      - $ref: '#/components/examples/publicManagedStreamWithTopicLevelPartitioner'
      - $ref: '#/components/examples/publicManagedStreamWithDefaultKafkaPartitioner'
      properties:
        canBeRetained:
          description: Whether MQTT records can have the "retained" flag.
          type: boolean
        partitioner:
          description: The partitioner used to partition messages across different
            kafka partitions.
          discriminator:
            mapping:
              kafkaDefault: '#/components/schemas/PublicManagedStreamKafkaDefaultPartitioner'
              topicLevel: '#/components/schemas/PublicManagedStreamTopicLevelPartitioner'
            propertyName: kind
          oneOf:
          - $ref: '#/components/schemas/PublicManagedStreamTopicLevelPartitioner'
          - $ref: '#/components/schemas/PublicManagedStreamKafkaDefaultPartitioner'
      required:
      - canBeRetained
      - partitioner
      type: object
    PublicManagedStreamKafkaDefaultPartitioner:
      example:
        $ref: '#/components/examples/defaultKafkaPartitioner'
      properties:
        kind:
          enum:
          - kafkaDefault
          example: kafkaDefault
      required:
      - kind
      type: object
    PublicManagedStreamTopicLevelPartitioner:
      example:
        $ref: '#/components/examples/topicLevelPartitioner'
      properties:
        kind:
          enum:
          - topicLevel
          example: topicLevel
        topicLevel:
          example: 2
          type: integer
      required:
      - topicLevel
      - kind
      type: object
    Secret:
      properties:
        name:
          type: string
        value:
          type: string
      required:
      - name
      - value
      type: object
    Task:
      example:
        healthy: true
        host: 10.0.2.36
        lastUpdate: 1638980430
        stagedAt: '2017-12-07T10:53:46.643Z'
        startedAt: '2017-12-07T10:55:41.765Z'
        state: RUNNING
        stoppedAt: '2017-12-07T10:58:41.765Z'
      properties:
        healthy:
          description: 'false or true depending on health checks (empty if no health
            checks)

            '
          type: boolean
        host:
          description: 'The IP address of the host the task is running on (not the
            IP address of the task itself)

            '
          format: ipv4
          type: string
        lastUpdate:
          description: Timestamp of the last time the task was updated
          format: int64
          type: integer
        logs:
          description: Optional link to the latest log dump for this task
          format: url
          type: string
        stagedAt:
          description: Staging time of the task
          format: date-time
          type: string
        startedAt:
          description: Start time of the task
          format: date-time
          type: string
        state:
          description: The state the task is in
          enum:
          - DROPPED
          - ERROR
          - FAILED
          - FINISHED
          - GONE
          - GONE_BY_OPERATOR
          - KILLED
          - KILLING
          - LOST
          - RUNNING
          - STAGING
          - STARTING
          - UNKNOWN
          - UNREACHABLE
          type: string
        stoppedAt:
          description: Stopped time of the task
          format: date-time
          type: string
      required:
      - host
      - stagedAt
      - startedAt
      - state
      type: object
    TaskStatus:
      properties:
        actual:
          $ref: '#/components/schemas/Task'
        configuration:
          $ref: '#/components/schemas/Task'
        status:
          $ref: '#/components/schemas/AllocationStatus'
      required:
      - status
      type: object
    Topic:
      properties:
        kafkaProperties:
          $ref: '#/components/schemas/KafkaProperties'
        partitions:
          type: integer
        replicationFactor:
          type: integer
      required:
      - partitions
      - replicationFactor
      type: object
    TopicStatus:
      properties:
        actual:
          $ref: '#/components/schemas/Topic'
        configuration:
          $ref: '#/components/schemas/Topic'
        status:
          $ref: '#/components/schemas/AllocationStatus'
      required:
      - status
      type: object
    Validations:
      properties:
        commonName:
          description: Certificate common name
          type: string
        country:
          description: Certificate country
          type: string
        locality:
          description: Certificate locality
          type: string
        organization:
          description: Certificate organization
          type: string
        organizationalUnit:
          description: Certificate Organizational unit
          type: string
        province:
          description: Certificate province
          type: string
        subjectType:
          description: Certificate subject Type
          type: string
      type: object
    Vhost:
      properties:
        value:
          type: string
      required:
      - value
      type: object
    Volume:
      properties:
        sizeGiB:
          type: integer
      required:
      - sizeGiB
      type: object
    VolumeStatus:
      properties:
        actual:
          $ref: '#/components/schemas/Volume'
        configuration:
          $ref: '#/components/schemas/Volume'
        status:
          $ref: '#/components/schemas/AllocationStatus'
      required:
      - status
      type: object
    Zone:
      description: available networks on this platform
      properties:
        network:
          enum:
          - internal
          - public
          type: string
      required:
      - network
      type: object
  securitySchemes:
    tokenAuth:
      scheme: bearer
      type: http
info:
  description: Resource management API for DSH
  title: DSH Tenant Resource Management REST API
  version: 1.8.0
openapi: 3.0.3
paths:
  /allocation/{tenant}/datacatalog/asset/{kind}:
    get:
      operationId: dataCatalogGetAlltenantdatacatalogassets
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          $ref: '#/components/responses/200-ChildList'
      summary: lists all data catalog assets of a tenant for the given kind
      tags:
      - data catalog
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/DataCatalogAssetKind'
  /allocation/{tenant}/datacatalog/asset/{kind}/{name}/configuration:
    delete:
      operationId: dataCatalogDeleteDatacatalogassetconfiguration
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '202':
          description: delete request has been accepted
      summary: deletes a dataCatalogAsset
      tags:
      - data catalog
    get:
      operationId: dataCatalogGetDatacatalogassetconfiguration
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                bucket:
                  $ref: '#/components/examples/dataCatalogAssetBucket'
                writablestream:
                  $ref: '#/components/examples/dataCatalogAssetWritableStream'
              schema:
                $ref: '#/components/schemas/DataCatalogAsset'
          description: configuration
      summary: gets configuration of a data catalog asset allocation
      tags:
      - data catalog
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/DataCatalogAssetKind'
    - $ref: '#/components/parameters/DataCatalogAssetName'
    put:
      operationId: dataCatalogPutDatacatalogassetconfiguration
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            examples:
              bucket:
                $ref: '#/components/examples/dataCatalogAssetBucket'
              writablestream:
                $ref: '#/components/examples/dataCatalogAssetWritableStream'
            schema:
              $ref: '#/components/schemas/DataCatalogAsset'
        description: the JSON representation of the resource
        required: true
      responses:
        '202':
          description: create/update request has been accepted
      summary: creates dataCatalogAsset configuration.
      tags:
      - data catalog
  /allocation/{tenant}/datacatalog/asset/{kind}/{name}:
    get:
      operationId: dataCatalogGetDatacatalogassetoftenant
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                dataCatalogAssetStatus:
                  $ref: '#/components/examples/dataCatalogAssetStatus'
              schema:
                $ref: '#/components/schemas/DataCatalogAssetStatus'
          description: the overall status of a specific data catalog asset allocation
            along with the asset's configured and actual state
      summary: shows overall status of a datacatalog asset allocation
      tags:
      - data catalog
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/DataCatalogAssetKind'
    - $ref: '#/components/parameters/DataCatalogAssetName'
  /allocation/{tenant}/bucketaccess:
    get:
      operationId: bucketAccessGetAlltenantbucketaccesses
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          $ref: '#/components/responses/200-ChildList'
      summary: lists all bucketaccesses of a tenant
      tags:
      - bucket access
    parameters:
    - $ref: '#/components/parameters/Tenant'
  /allocation/{tenant}/bucketwatch:
    get:
      operationId: bucketWatchGetAlltenantbucketwatches
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          $ref: '#/components/responses/200-ChildList'
      summary: lists all bucketwatches of a tenant
      tags:
      - bucket watch
    parameters:
    - $ref: '#/components/parameters/Tenant'
  /allocation/{tenant}/bucket:
    get:
      operationId: bucketGetAlltenantbuckets
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          $ref: '#/components/responses/200-ChildList'
      summary: lists all bucket names of a tenant
      tags:
      - bucket
    parameters:
    - $ref: '#/components/parameters/Tenant'
  /allocation/{tenant}/thirdpartybucketconcession:
    get:
      operationId: thirdPartyBucketGetAlltenantthirdpartybucketconcessions
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          $ref: '#/components/responses/200-ChildList'
      summary: list summaries of third party buckets, registered using credentials
        shared to you by a third party
      tags:
      - third party bucket
    parameters:
    - $ref: '#/components/parameters/Tenant'
    post:
      operationId: thirdPartyBucketPostAlltenantthirdpartybucketconcessions
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            examples:
              registration:
                $ref: '#/components/examples/thirdpartybucketRegistration'
            schema:
              $ref: '#/components/schemas/ThirdPartyBucketConcessionRegistration'
        description: the secret value
        required: true
      responses:
        '201':
          description: the third party bucket has been registered, and should soon
            be listable together with the resulting bucket.
      summary: register a new bucket concession for which credentials were shared
        to you by a third party
      tags:
      - third party bucket
  /allocation/{tenant}/bucket/{id}/bucketaccess/{name}/actual:
    get:
      operationId: bucketAccessGetBucketaccessactualofbucketaccess
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                bucketaccess:
                  $ref: '#/components/examples/bucketaccessactual'
              schema:
                $ref: '#/components/schemas/BucketAccess'
          description: configuration of a bucketaccess allocation as it is actually
            deployed. This may differ from the wanted configuration
      summary: gets actual configuration of a bucketaccess allocation
      tags:
      - bucket access
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/BucketId'
    - $ref: '#/components/parameters/BucketAccessName'
  /allocation/{tenant}/bucket/{id}/bucketaccess/{name}/status::
    get:
      operationId: bucketAccessGetBucketaccessallocstatusofbucketaccess
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          $ref: '#/components/responses/200-AllocationStatus'
      summary: gets status description of a bucketaccess allocation
      tags:
      - bucket access
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/BucketId'
    - $ref: '#/components/parameters/BucketAccessName'
  /allocation/{tenant}/bucket/{id}/bucketaccess/{name}/configuration:
    delete:
      operationId: bucketAccessDeleteBucketaccessconfigofbucketaccess
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '202':
          description: delete request has been accepted
      summary: deletes a bucketaccess
      tags:
      - bucket access
    get:
      operationId: bucketAccessGetBucketaccessconfigofbucketaccess
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BucketAccessConfiguration'
          description: configuration
      summary: gets configuration of a bucketaccess allocation
      tags:
      - bucket access
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/BucketId'
    - $ref: '#/components/parameters/BucketAccessName'
    put:
      operationId: bucketAccessPutBucketaccessconfigofbucketaccess
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            examples:
              request:
                $ref: '#/components/examples/bucketaccesswanted'
            schema:
              $ref: '#/components/schemas/BucketAccessConfiguration'
        description: the wanted config of the (new) bucketaccess allocation
        required: true
      responses:
        '202':
          description: create/update request has been accepted
      summary: creates bucketaccess configuration.
      tags:
      - bucket access
  /allocation/{tenant}/bucket/{id}/bucketaccess/{name}:
    get:
      operationId: bucketAccessGetBucketaccessofbucket
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BucketAccessStatus'
          description: the overall status of a specific bucketaccess allocation along
            with the its configured and actual state
      summary: shows overall status of a third party bucket
      tags:
      - bucket access
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/BucketId'
    - $ref: '#/components/parameters/BucketAccessName'
  /allocation/{tenant}/bucket/{id}/bucketaccess:
    get:
      operationId: bucketAccessGetBucketaccessesofbucket
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          $ref: '#/components/responses/200-ChildList'
      summary: shows bucketaccesses about a specific bucket
      tags:
      - bucket access
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/BucketId'
  /allocation/{tenant}/bucket/{id}/actual:
    get:
      operationId: bucketGetBucketactual
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                bucket:
                  $ref: '#/components/examples/bucket'
              schema:
                $ref: '#/components/schemas/Bucket'
          description: configuration of a bucket allocation as it is actually deployed.
            This may differ from the wanted configuration
      summary: gets actual configuration of a bucket allocation
      tags:
      - bucket
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/BucketId'
  /allocation/{tenant}/bucket/{id}/status:
    get:
      operationId: bucketGetBucketallocstatus
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          $ref: '#/components/responses/200-AllocationStatus'
      summary: gets status description of a bucket allocation
      tags:
      - bucket
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/BucketId'
  /allocation/{tenant}/bucket/{id}/configuration:
    delete:
      operationId: bucketDeleteBucketconfiguration
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '202':
          description: delete request has been accepted
      summary: deletes a bucket
      tags:
      - bucket
    get:
      operationId: bucketGetBucketconfiguration
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                bucket:
                  $ref: '#/components/examples/bucket'
              schema:
                $ref: '#/components/schemas/Bucket'
          description: configuration
      summary: gets configuration of a bucket allocation
      tags:
      - bucket
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/BucketId'
    put:
      operationId: bucketPutBucketconfiguration
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            examples:
              bucket:
                $ref: '#/components/examples/bucket'
            schema:
              $ref: '#/components/schemas/Bucket'
        description: the JSON representation of the resource
        required: true
      responses:
        '202':
          description: create/update request has been accepted
      summary: creates bucket configuration.It is impossible to update an existing
        bucket. This requires a delete of the existing bucket and creation of a new
        one with the wanted configuration.
      tags:
      - bucket
  /allocation/{tenant}/bucket/{id}:
    get:
      operationId: bucketGetBucketoftenant
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                bucketStatus:
                  $ref: '#/components/examples/bucketStatus'
              schema:
                $ref: '#/components/schemas/BucketStatus'
          description: the overall status of a specific bucket allocation along with
            the bucket's configured and actual state
      summary: shows overall status of a bucket allocation
      tags:
      - bucket
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/BucketId'
  /allocation/{tenant}/bucket/{id}/bucketwatch/actual:
    get:
      operationId: bucketWatchGetBucketwatchactualofbucket
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BucketWatch'
          description: configuration of a bucketwatch allocation as it is actually
            deployed. This may differ from the wanted configuration
      summary: gets actual configuration of a bucketwatch allocation
      tags:
      - bucket watch
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/BucketId'
  /allocation/{tenant}/bucket/{id}/bucketwatch/status:
    get:
      operationId: bucketWatchGetBucketwatchallocstatusofbucket
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          $ref: '#/components/responses/200-AllocationStatus'
      summary: gets status description of a bucketwatch allocation
      tags:
      - bucket watch
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/BucketId'
  /allocation/{tenant}/bucket/{id}/bucketwatch/configuration:
    delete:
      operationId: bucketWatchDeleteBucketwatchconfigofbucket
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '202':
          description: delete request has been accepted
      summary: deletes a bucketwatch
      tags:
      - bucket watch
    get:
      operationId: bucketWatchGetBucketwatchconfigofbucket
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BucketWatch'
          description: configuration
      summary: gets configuration of a bucketwatch allocation
      tags:
      - bucket watch
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/BucketId'
    put:
      operationId: bucketWatchPutBucketwatchconfigofbucket
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '202':
          description: create/update request has been accepted
      summary: creates bucketwatch configuration.
      tags:
      - bucket watch
  /allocation/{tenant}/bucket/{id}/bucketwatch:
    get:
      operationId: bucketWatchGetBucketwatchofbucket
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                bucketWatchStatus:
                  $ref: '#/components/examples/bucketWatchStatus'
              schema:
                $ref: '#/components/schemas/BucketWatchStatus'
          description: the overall status of a specific bucketwatch allocation
      summary: shows overall status of a bucketwatch allocation
      tags:
      - bucket watch
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/BucketId'
  /allocation/{tenant}/bucket/fromthirdparty:
    get:
      operationId: thirdPartyBucketGetOnlytenantbucketsfromthirdpartyconcessions
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          $ref: '#/components/responses/200-ChildList'
      summary: lists only bucket names of a tenant that originated from a third party
        bucket
      tags:
      - third party bucket
    parameters:
    - $ref: '#/components/parameters/Tenant'
  /allocation/{tenant}/thirdpartybucketconcession/{id}:
    get:
      operationId: thirdPartyBucketGetThirdpartybucketconcession
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                bucketStatus:
                  $ref: '#/components/examples/thirdpartybucketConcessionStatus'
              schema:
                $ref: '#/components/schemas/ThirdPartyBucketConcessionStatus'
          description: the overall status of a specific third party bucket along with
            the concession's configured and actual state
      summary: shows overall status of a third party bucket
      tags:
      - third party bucket
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/ThirdPartyBucketId'
  /allocation/{tenant}/thirdpartybucketconcession/{id}/actual:
    get:
      operationId: thirdPartyBucketGetThirdpartybucketconcessionactual
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                bucket:
                  $ref: '#/components/examples/thirdpartybucketConcession'
              schema:
                $ref: '#/components/schemas/ThirdPartyBucketConcession'
          description: configuration
      summary: gets actual configuration of a third party bucket (received bucket
        access) allocation
      tags:
      - third party bucket
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/ThirdPartyBucketId'
  /allocation/{tenant}/thirdpartybucketconcession/{id}/status:
    get:
      operationId: thirdPartyBucketGetThirdpartybucketconcessionallocstatus
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          $ref: '#/components/responses/200-AllocationStatus'
      summary: gets status description of third party bucket (received bucket access)
        allocation
      tags:
      - third party bucket
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/ThirdPartyBucketId'
  /allocation/{tenant}/thirdpartybucketconcession/{id}/configuration:
    delete:
      operationId: thirdPartyBucketDeleteThirdpartybucketconcessionconfig
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '202':
          description: delete request has been accepted
      summary: unregisters a third party bucket. This will also remove the virtual
        bucket.
      tags:
      - third party bucket
    get:
      operationId: thirdPartyBucketGetThirdpartybucketconcessionconfig
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                bucket:
                  $ref: '#/components/examples/thirdpartybucketConcession'
              schema:
                $ref: '#/components/schemas/ThirdPartyBucketConcession'
          description: configuration
      summary: gets configuration of a third party bucket (received bucket access)
        allocation
      tags:
      - third party bucket
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/ThirdPartyBucketId'
  /allocation/{tenant}/aclgroup:
    get:
      operationId: kafkaAclGroupGetByTenantAclgroup
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          $ref: '#/components/responses/200-ChildList'
      summary: list tenant Kafka ACL groups
      tags:
      - kafka acl group
    parameters:
    - $ref: '#/components/parameters/Tenant'
  /allocation/{tenant}/aclgroup/{id}/configuration:
    delete:
      operationId: kafkaAclGroupDeleteByTenantAclgroupByIdConfiguration
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '202':
          description: delete request has been accepted
      summary: deletes a Kafka ACL group
      tags:
      - kafka acl group
    get:
      operationId: kafkaAclGroupGetByTenantAclgroupByIdConfiguration
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KafkaAclGroup'
          description: Returns the Kafka ACL group definition
      summary: return the configuration of the Kafka ACl group
      tags:
      - kafka acl group
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/KafkaACLGroupId'
    put:
      operationId: kafkaAclGroupPutByTenantAclgroupByIdConfiguration
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KafkaAclGroup'
        description: the Kafka ACL group definition
        required: true
      responses:
        '202':
          description: create request has been accepted
      summary: creates a new or updates an existing Kafka ACL group
      tags:
      - kafka acl group
  /allocation/{tenant}/appcatalogapp/actual:
    get:
      operationId: appCatalogGetByTenantAppcatalogappActual
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/AppCatalogApp'
                type: object
          description: 'configuration of all App Catalog App allocations as they are
            actually deployed. This may differ from the wanted configuration. This
            shows the complete configuration of the App Catalog App. To only view
            the configuration parameters of this allocation, see the `appcatalogappconfiguration`
            section.

            '
      summary: returns a list containing all App Catalog App allocations and their
        respective configurations of a given tenant, as they are actually deployed
      tags:
      - app catalog
    parameters:
    - $ref: '#/components/parameters/Tenant'
  /allocation/{tenant}/appcatalogapp/configuration:
    get:
      operationId: appCatalogGetByTenantAppcatalogappConfiguration
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/AppCatalogApp'
                type: object
          description: 'configuration of all App Catalog App allocations of a tenant.
            This may differ from the wanted configuration. This shows the complete
            configuration of the App Catalog App. To only view the configuration parameters
            of this allocation, see the `appcatalogappconfiguration` section.

            '
      summary: returns a list containing all App Catalog App allocations and their
        respective configurations of a given tenant
      tags:
      - app catalog
    parameters:
    - $ref: '#/components/parameters/Tenant'
  /allocation/{tenant}/appcatalogapp/{appcatalogappid}/actual:
    get:
      operationId: appCatalogGetByTenantAppcatalogappByAppcatalogappidActual
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppCatalogApp'
          description: a JSON object containing the configuration of an App Catalog
            App allocation as it is actually deployed. This may differ from the wanted
            configuration. If an application is stuck while deploying, it will not
            show up here.
      summary: 'returns the configuration of an App Catalog App allocation as it is
        actually deployed. To only view the configuration parameters of this allocation,
        see the `appcatalogappconfiguration` section.

        '
      tags:
      - app catalog
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/AppCatalogAppID'
  /allocation/{tenant}/appcatalogapp/{appcatalogappid}/configuration:
    get:
      operationId: appCatalogGetByTenantAppcatalogappByAppcatalogappidConfiguration
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppCatalogApp'
          description: a JSON object containing the configuration of an appcatalogapp
            allocation
      summary: 'returns the configuration of an App Catalog App allocation by a specified
        tenant name and App Catalog App Id. To only view the configuration parameters
        of this allocation, see the `appcatalogappconfiguration` section.

        '
      tags:
      - app catalog
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/AppCatalogAppID'
  /allocation/{tenant}/application/actual:
    get:
      operationId: applicationGetByTenantApplicationActual
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/Application'
                type: object
          description: returns a JSON object containing the configurations of all
            application allocations as they are actually deployed. This may differ
            from the wanted configuration. If an application is stuck while deploying,
            it will not show up here.
      summary: returns a list containing the configuration of every deployed application
        of a given tenant
      tags:
      - application
    parameters:
    - $ref: '#/components/parameters/Tenant'
  /allocation/{tenant}/application/configuration:
    get:
      operationId: applicationGetByTenantApplicationConfiguration
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/Application'
                type: object
          description: Returns a json object where the key is the name of an application,
            and the value is it's respective configuration.
      summary: Returns the configuration of every application created by a given tenant.
      tags:
      - application
    parameters:
    - $ref: '#/components/parameters/Tenant'
  /allocation/{tenant}/application/{appid}/actual:
    get:
      operationId: applicationGetByTenantApplicationByAppidActual
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                objectExample:
                  $ref: '#/components/examples/application'
              schema:
                $ref: '#/components/schemas/Application'
          description: returns a JSON object containing the configuration of an application
            allocation as it is actually deployed. This may differ from the wanted
            configuration. If an application is stuck while deploying, it will not
            show up here.
      summary: returns the configuration of a deployed application allocation for
        a given app id and tenant
      tags:
      - application
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/AppID'
  /allocation/{tenant}/application/{appid}/configuration:
    delete:
      operationId: applicationDeleteByTenantApplicationByAppidConfiguration
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '202':
          description: delete request has been accepted
      summary: deletes an application by a specified application id
      tags:
      - application
    get:
      operationId: applicationGetByTenantApplicationByAppidConfiguration
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                application:
                  $ref: '#/components/examples/application'
              schema:
                $ref: '#/components/schemas/Application'
          description: Returns the service definition of a given application identifier
            and tenant
      summary: Returns the configuration of a certain application, specified by the
        tenant name and application name.
      tags:
      - application
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/AppID'
    put:
      operationId: applicationPutByTenantApplicationByAppidConfiguration
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            examples:
              application:
                $ref: '#/components/examples/application'
            schema:
              $ref: '#/components/schemas/Application'
        description: a JSON containing the configuration of the application you want
          to deploy
        required: true
      responses:
        '202':
          description: create/update request has been accepted
        '500':
          description: create/update request was not accepted
      summary: creates an application allocation, or update it's configuration
      tags:
      - application
  /allocation/{tenant}/application/{appid}/status:
    get:
      operationId: applicationGetByTenantApplicationByAppidStatus
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          $ref: '#/components/responses/200-AllocationStatus'
      summary: returns a status description of an application allocation
      tags:
      - application
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/AppID'
  /allocation/{tenant}/certificate:
    get:
      operationId: certificateGetByTenantCertificate
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          $ref: '#/components/responses/200-ChildList'
      summary: returns a list of all certificate names that are allocated to a tenant
      tags:
      - certificate
    parameters:
    - $ref: '#/components/parameters/Tenant'
  /allocation/{tenant}/certificate/{id}:
    get:
      operationId: certificateGetByTenantCertificateById
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                certificateStatus:
                  $ref: '#/components/examples/certificateStatus'
              schema:
                $ref: '#/components/schemas/CertificateStatus'
          description: a JSON object containing the overall status of a specific certificate
            allocation along with the certificate's configuration and  its actual
            state
      summary: returns the status of a specific certificate allocation by id
      tags:
      - certificate
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/CertificateId'
  /allocation/{tenant}/certificate/{id}/actual:
    get:
      operationId: certificateGetByTenantCertificateByIdActual
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                certificate:
                  $ref: '#/components/examples/certificate'
              schema:
                $ref: '#/components/schemas/Certificate'
          description: a JSON object containing the configuration of a certificate
            allocation as it is actually deployed. This may differ from the wanted
            configuration
      summary: returns the actual configuration of a certificate allocation. This
        may not represent the wanted configuration.
      tags:
      - certificate
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/CertificateId'
  /allocation/{tenant}/certificate/{id}/configuration:
    delete:
      operationId: certificateDeleteByTenantCertificateByIdConfiguration
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '202':
          description: delete request has been accepted
      summary: deletes a certificate by id
      tags:
      - certificate
    get:
      operationId: certificateGetByTenantCertificateByIdConfiguration
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                certificate:
                  $ref: '#/components/examples/certificate'
              schema:
                $ref: '#/components/schemas/Certificate'
          description: a JSON object containing the configuration of a certain certificate
      summary: returns the configuration of a certificate allocation
      tags:
      - certificate
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/CertificateId'
    put:
      operationId: certificatePutByTenantCertificateByIdConfiguration
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            examples:
              certificate:
                $ref: '#/components/examples/certificate'
            schema:
              $ref: '#/components/schemas/Certificate'
        description: the JSON object containing the configuration of a certificate.
          certChainSecret and keySecret must be known to the platform.
        required: true
      responses:
        '202':
          description: create/update request has been accepted
      summary: create a new certificate. It is impossible to update an existing certificate.
        This requires a delete of the existing certificate and creation of a new one
        with the wanted configuration.
      tags:
      - certificate
  /allocation/{tenant}/certificate/{id}/status:
    get:
      operationId: certificateGetByTenantCertificateByIdStatus
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          $ref: '#/components/responses/200-AllocationStatus'
      summary: returns a brief status description of a certificate allocation
      tags:
      - certificate
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/CertificateId'
  /allocation/{tenant}/database:
    get:
      operationId: databaseGetByTenantDatabase
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          $ref: '#/components/responses/200-ChildList'
      summary: (beta release) lists ids of all databases of a tenant
      tags:
      - database
    parameters:
    - $ref: '#/components/parameters/Tenant'
  /allocation/{tenant}/database/{id}:
    get:
      operationId: databaseGetByTenantDatabaseById
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                databaseStatus:
                  $ref: '#/components/examples/databaseStatus'
              schema:
                $ref: '#/components/schemas/DatabaseStatus'
          description: the overall status of a specific database allocation along
            with the database's configured and actual state
      summary: (beta release) gets overall status of a database allocation
      tags:
      - database
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/DatabaseId'
  /allocation/{tenant}/database/{id}/actual:
    get:
      operationId: databaseGetByTenantDatabaseByIdActual
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                database:
                  $ref: '#/components/examples/database'
              schema:
                $ref: '#/components/schemas/Database'
          description: configuration of a database allocation as it is actually deployed.
            This may differ from the wanted configuration
      summary: (beta release) gets actual state for a database allocation
      tags:
      - database
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/DatabaseId'
  /allocation/{tenant}/database/{id}/configuration:
    delete:
      operationId: databaseDeleteByTenantDatabaseByIdConfiguration
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '202':
          description: delete request has been accepted
      summary: (beta release) deletes a database
      tags:
      - database
    get:
      operationId: databaseGetByTenantDatabaseByIdConfiguration
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                database:
                  $ref: '#/components/examples/database'
              schema:
                $ref: '#/components/schemas/Database'
          description: returns the configuration for this database allocation
      summary: (beta release) gets configuration for a database allocation
      tags:
      - database
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/DatabaseId'
    put:
      operationId: databasePutByTenantDatabaseByIdConfiguration
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            examples:
              database:
                $ref: '#/components/examples/database'
            schema:
              $ref: '#/components/schemas/Database'
        description: the JSON representation of the resource
        required: true
      responses:
        '202':
          description: create request has been accepted
      summary: (beta release) creates a database configuration. It is impossible to
        update an existing database.
      tags:
      - database
  /allocation/{tenant}/database/{id}/status:
    get:
      operationId: databaseGetByTenantDatabaseByIdStatus
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          $ref: '#/components/responses/200-AllocationStatus'
      summary: (beta release) gets status description of a database allocation
      tags:
      - database
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/DatabaseId'
  /allocation/{tenant}/flinkcluster:
    get:
      operationId: flinkClusterGetByTenantFlinkcluster
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                flinkClusterStatus:
                  $ref: '#/components/examples/flinkClusterStatus'
              schema:
                $ref: '#/components/schemas/FlinkClusterStatus'
          description: a JSON object containing a Flink Cluster's overall status,
            actual state and its configuration
      summary: returns the overall status of a Flink Cluster
      tags:
      - flink cluster
    parameters:
    - $ref: '#/components/parameters/Tenant'
  /allocation/{tenant}/flinkcluster/actual:
    get:
      operationId: flinkClusterGetByTenantFlinkclusterActual
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                flinkCluster:
                  $ref: '#/components/examples/flinkCluster'
              schema:
                $ref: '#/components/schemas/FlinkCluster'
          description: a JSON object containing the configuration of a Flink Cluster
            as it is actually deployed. This may differ from the wanted configuration
      summary: returns the actual configuration of a Flink Cluster.
      tags:
      - flink cluster
    parameters:
    - $ref: '#/components/parameters/Tenant'
  /allocation/{tenant}/flinkcluster/configuration:
    delete:
      operationId: flinkClusterDeleteByTenantFlinkclusterConfiguration
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '202':
          description: delete request has been accepted
      summary: deletes a Flink Cluster. Since only one cluster can be created per
        tenant, only the tenants' name needs to be specified.
      tags:
      - flink cluster
    get:
      operationId: flinkClusterGetByTenantFlinkclusterConfiguration
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                flinkCluster:
                  $ref: '#/components/examples/flinkCluster'
              schema:
                $ref: '#/components/schemas/FlinkCluster'
          description: a JSON object containing the configuration of a Flink Cluster
      summary: returns the configuration of a Flink Cluster
      tags:
      - flink cluster
    parameters:
    - $ref: '#/components/parameters/Tenant'
    put:
      operationId: flinkClusterPutByTenantFlinkclusterConfiguration
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            examples:
              flinkCluster:
                $ref: '#/components/examples/flinkCluster'
            schema:
              $ref: '#/components/schemas/FlinkCluster'
        description: a JSON object containing the desired configuration of the Flink
          Cluster. Zone must be known to the platform.
        required: true
      responses:
        '202':
          description: create/update request has been accepted
      summary: create a new Flink Cluster. It is impossible to update an existing
        Flink Cluster. This requires a delete of the existing Flink Cluster and creation
        of a new one with the wanted configuration.
      tags:
      - flink cluster
  /allocation/{tenant}/flinkcluster/status:
    get:
      operationId: flinkClusterGetByTenantFlinkclusterStatus
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          $ref: '#/components/responses/200-AllocationStatus'
      summary: returns a brief status description of a Flink Cluster
      tags:
      - flink cluster
    parameters:
    - $ref: '#/components/parameters/Tenant'
  /allocation/{tenant}/kafkaproxy:
    get:
      operationId: kafkaProxyGetByTenantKafkaproxy
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          $ref: '#/components/responses/200-ChildList'
      summary: returns a list of all kafka proxies of a tenant
      tags:
      - kafka proxy
    parameters:
    - $ref: '#/components/parameters/Tenant'
  /allocation/{tenant}/kafkaproxy/{id}/configuration:
    delete:
      operationId: kafkaProxyDeleteByTenantKafkaproxyByIdConfiguration
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '202':
          description: delete request has been accepted
      summary: deletes a kafka proxy
      tags:
      - kafka proxy
    get:
      operationId: kafkaProxyGetByTenantKafkaproxyByIdConfiguration
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                kafkaProxy:
                  $ref: '#/components/examples/kafkaProxy'
              schema:
                $ref: '#/components/schemas/KafkaProxy'
          description: Returns the service definition of a given kafka proxy
      summary: Returns the configuration of a certain kafka Proxy, specified by the
        tenant name and kafka Proxy name.
      tags:
      - kafka proxy
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/KafkaProxyId'
    put:
      operationId: kafkaProxyPutByTenantKafkaproxyByIdConfiguration
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            examples:
              kafkaProxy:
                $ref: '#/components/examples/kafkaProxy'
            schema:
              $ref: '#/components/schemas/KafkaProxy'
        description: the kafka proxy configuration options
        required: true
      responses:
        '200':
          description: the secret value is updated
      summary: update the value of the kafka proxy
      tags:
      - kafka proxy
  /allocation/{tenant}/secret:
    get:
      operationId: secretGetByTenantSecret
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          $ref: '#/components/responses/200-ChildList'
      summary: returns a list of all secret names of a tenant
      tags:
      - secret
    parameters:
    - $ref: '#/components/parameters/Tenant'
    post:
      operationId: secretPostByTenantSecret
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            examples:
              secret:
                $ref: '#/components/examples/secret'
            schema:
              $ref: '#/components/schemas/Secret'
        description: a JSON object containing the name and the secret value
        required: true
      responses:
        '201':
          description: the secret value is updated
      summary: create a new secret
      tags:
      - secret
  /allocation/{tenant}/secret/{id}:
    get:
      operationId: secretGetByTenantSecretById
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            text/plain:
              schema:
                type: string
          description: the secret value as a string
      summary: returns the value of a secret
      tags:
      - secret
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/SecretId'
    put:
      operationId: secretPutByTenantSecretById
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      requestBody:
        content:
          text/plain:
            example: my new secret value
            schema:
              type: string
        description: the secret value as a string
        required: true
      responses:
        '200':
          description: the secret value is updated
      summary: update the value of a secret
      tags:
      - secret
  /allocation/{tenant}/secret/{id}/actual:
    get:
      operationId: secretGetByTenantSecretByIdActual
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: The response body will be empty, but a 200 response indicates
            that the secret is created.
      summary: returns the actual state of a secret. The response body will always
        be empty because we cannot share the secret value, but the response code will
        tell you more about its state.
      tags:
      - secret
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/SecretId'
  /allocation/{tenant}/secret/{id}/configuration:
    delete:
      operationId: secretDeleteByTenantSecretByIdConfiguration
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '202':
          description: delete request has been accepted
      summary: deletes a secret
      tags:
      - secret
    get:
      operationId: secretGetByTenantSecretByIdConfiguration
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: a JSON object containing the configuration of this secret allocation
      summary: returns the configuration of a secret allocation
      tags:
      - secret
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/SecretId'
  /allocation/{tenant}/secret/{id}/status:
    get:
      operationId: secretGetByTenantSecretByIdStatus
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          $ref: '#/components/responses/200-AllocationStatus'
      summary: returns a brief status description of a secret allocation
      tags:
      - secret
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/SecretId'
  /allocation/{tenant}/task:
    get:
      operationId: applicationGetByTenantTask
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          $ref: '#/components/responses/200-ChildList'
      summary: return a list containing the ids of all applications with derived tasks
      tags:
      - application
    parameters:
    - $ref: '#/components/parameters/Tenant'
  /allocation/{tenant}/task/{appid}:
    get:
      operationId: applicationGetByTenantTaskByAppid
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          $ref: '#/components/responses/200-ChildList'
      summary: return a list containing the ids of an application's derived tasks
      tags:
      - application
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/AppID'
  /allocation/{tenant}/task/{appid}/{id}:
    get:
      operationId: applicationGetByTenantTaskByAppidById
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                taskStatus:
                  $ref: '#/components/examples/taskStatus'
              schema:
                $ref: '#/components/schemas/TaskStatus'
          description: a JSON object containing the overall status of a specific task
            allocation along with the task's configured and actual state
      summary: returns overall status of a task
      tags:
      - application
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/AppID'
    - $ref: '#/components/parameters/TaskId'
  /allocation/{tenant}/task/{appid}/{id}/actual:
    get:
      operationId: applicationGetByTenantTaskByAppidByIdActual
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                task:
                  $ref: '#/components/examples/task'
              schema:
                $ref: '#/components/schemas/Task'
          description: a JSON object containing the actual state of a specific task.
            This may differ from the task's configured state
      summary: returns the actual state of a specific task
      tags:
      - application
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/AppID'
    - $ref: '#/components/parameters/TaskId'
  /allocation/{tenant}/task/{appid}/{id}/status:
    get:
      operationId: applicationGetByTenantTaskByAppidByIdStatus
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          $ref: '#/components/responses/200-AllocationStatus'
      summary: returns a brief status description of a task
      tags:
      - application
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/AppID'
    - $ref: '#/components/parameters/TaskId'
  /allocation/{tenant}/topic:
    get:
      operationId: topicGetByTenantTopic
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          $ref: '#/components/responses/200-ChildList'
      summary: returns a list of topics of a tenant
      tags:
      - topic
    parameters:
    - $ref: '#/components/parameters/Tenant'
  /allocation/{tenant}/topic/{id}:
    get:
      operationId: topicGetByTenantTopicById
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                topicStatus:
                  $ref: '#/components/examples/topicStatus'
              schema:
                $ref: '#/components/schemas/TopicStatus'
          description: a JSON object containing the overall status of a specific topic
            allocation along with the topic's configured and actual state
      summary: returns the overall status of a topic allocation
      tags:
      - topic
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/TopicId'
  /allocation/{tenant}/topic/{id}/actual:
    get:
      operationId: topicGetByTenantTopicByIdActual
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                topic:
                  $ref: '#/components/examples/topic'
              schema:
                $ref: '#/components/schemas/Topic'
          description: a JSON object containing the configuration of a topic allocation
            as it is actually deployed. This may differ from the wanted configuration
      summary: returns actual configuration of a topic allocation
      tags:
      - topic
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/TopicId'
  /allocation/{tenant}/topic/{id}/configuration:
    delete:
      operationId: topicDeleteByTenantTopicByIdConfiguration
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '202':
          description: delete request has been accepted
      summary: deletes a topic
      tags:
      - topic
    get:
      operationId: topicGetByTenantTopicByIdConfiguration
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                topic:
                  $ref: '#/components/examples/topic'
              schema:
                $ref: '#/components/schemas/Topic'
          description: a JSON object containing the configuration of a topic allocation
      summary: returns the configuration of a topic allocation
      tags:
      - topic
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/TopicId'
    put:
      operationId: topicPutByTenantTopicByIdConfiguration
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            examples:
              topic:
                $ref: '#/components/examples/topic'
            schema:
              $ref: '#/components/schemas/Topic'
        description: the JSON object containing the configuration of the desired topic
        required: true
      responses:
        '202':
          description: create/update request has been accepted
      summary: create a new topic. It is impossible to update an existing topic. This
        requires a delete of the existing topic and creation of a new one with the
        wanted configuration.
      tags:
      - topic
  /allocation/{tenant}/topic/{id}/status:
    get:
      operationId: topicGetByTenantTopicByIdStatus
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          $ref: '#/components/responses/200-AllocationStatus'
      summary: returns a brief status description of a topic allocation
      tags:
      - topic
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/TopicId'
  /allocation/{tenant}/volume:
    get:
      operationId: volumeGetByTenantVolume
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          $ref: '#/components/responses/200-ChildList'
      summary: returns a list containing the ids of all volumes of a given tenant
      tags:
      - volume
    parameters:
    - $ref: '#/components/parameters/Tenant'
  /allocation/{tenant}/volume/{id}:
    get:
      operationId: volumeGetByTenantVolumeById
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                volumeStatus:
                  $ref: '#/components/examples/volumeStatus'
              schema:
                $ref: '#/components/schemas/VolumeStatus'
          description: a JSON object containing the overall status of a specific volume
            allocation along with the volume's configured and actual state
      summary: returns the overall status of a volume allocation
      tags:
      - volume
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/VolumeId'
  /allocation/{tenant}/volume/{id}/actual:
    get:
      operationId: volumeGetByTenantVolumeByIdActual
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                volume:
                  $ref: '#/components/examples/volume'
              schema:
                $ref: '#/components/schemas/Volume'
          description: a JSOn object containing the configuration of a volume allocation
            as it is actually deployed. This may differ from the wanted configuration
      summary: returns the actual state for a volume allocation
      tags:
      - volume
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/VolumeId'
  /allocation/{tenant}/volume/{id}/configuration:
    delete:
      operationId: volumeDeleteByTenantVolumeByIdConfiguration
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '202':
          description: delete request has been accepted
      summary: deletes a volume
      tags:
      - volume
    get:
      operationId: volumeGetByTenantVolumeByIdConfiguration
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                volume:
                  $ref: '#/components/examples/volume'
              schema:
                $ref: '#/components/schemas/Volume'
          description: a JSON object containing the configuration for a volume allocation
      summary: returns the configuration for a volume allocation
      tags:
      - volume
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/VolumeId'
    put:
      operationId: volumePutByTenantVolumeByIdConfiguration
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            examples:
              volume:
                $ref: '#/components/examples/volume'
            schema:
              $ref: '#/components/schemas/Volume'
        description: the JSON object containing the desired configuration of a volume
          allocation
        required: true
      responses:
        '202':
          description: create request has been accepted
      summary: create a new volume configuration. It is impossible to update an existing
        volume. This requires a delete of the existing volume and creation of a new
        one with the wanted configuration.
      tags:
      - volume
  /allocation/{tenant}/volume/{id}/status:
    get:
      operationId: volumeGetByTenantVolumeByIdStatus
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          $ref: '#/components/responses/200-AllocationStatus'
      summary: returns a brief status description of a volume allocation
      tags:
      - volume
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/VolumeId'
  /appcatalog/{tenant}/appcatalogapp/{appcatalogappid}/configuration:
    delete:
      operationId: appCatalogAppConfigurationDeleteAppcatalogByTenantAppcatalogappByAppcatalogappidConfiguration
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '202':
          description: the delete request has been accepted
      summary: deletes an App Catalog App
      tags:
      - app catalog app configuration
    get:
      operationId: appCatalogAppConfigurationGetAppcatalogByTenantAppcatalogappByAppcatalogappidConfiguration
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                appcatalogapp:
                  $ref: '#/components/examples/appcatalogappconfiguration'
              schema:
                $ref: '#/components/schemas/AppCatalogAppConfiguration'
          description: A JSON Object containing the wanted configuration of an App
            Catalog App
      summary: Returns the wanted configuration of an App Catalog App by its tenant
        name and AppCatalogApp Id. If an App Catalog App is stuck while deploying
        and not on actual, it will show up here.
      tags:
      - app catalog app configuration
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/AppCatalogAppID'
    put:
      operationId: appCatalogAppConfigurationPutAppcatalogByTenantAppcatalogappByAppcatalogappidConfiguration
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            examples:
              appcatalogapp:
                $ref: '#/components/examples/appcatalogappconfiguration'
            schema:
              $ref: '#/components/schemas/AppCatalogAppConfiguration'
        description: JSON object containing required parameters for AppCatalogApp
          manifest. This is comparable to the configuration object on a regular Application
          service.
        required: true
      responses:
        '202':
          description: create/update request has been accepted
        '500':
          description: create/update request was not accepted
      summary: creates a new App Catalog App, or update its configuration
      tags:
      - app catalog app configuration
  /appcatalog/{tenant}/appcatalogapp/{appcatalogappid}/status:
    get:
      operationId: appCatalogAppConfigurationGetAppcatalogByTenantAppcatalogappByAppcatalogappidStatus
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          $ref: '#/components/responses/200-AllocationStatus'
      summary: gets status description of an App Catalog App
      tags:
      - app catalog app configuration
    parameters:
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/AppCatalogAppID'
  /appcatalog/{tenant}/manifest:
    get:
      operationId: appCatalogManifestGetAppcatalogByTenantManifest
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AppCatalogManifest'
                type: array
          description: lists AppCatalog manifests
      summary: returns a list of AppCatalog manifests for a given tenant
      tags:
      - app catalog manifest
    parameters:
    - $ref: '#/components/parameters/Tenant'
  /manage/{manager}/stream:
    get:
      operationId: managedStreamsGetManageByManagerStream
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ManagedStreamId'
                type: array
          description: a list of stream id's
      summary: get a list of streams managed by the managing tenant
      tags:
      - managed streams
    parameters:
    - $ref: '#/components/parameters/Manager'
  /manage/{manager}/stream/internal/{streamId}/configuration:
    delete:
      operationId: managedStreamsDeleteManageByManagerStreamInternalByStreamidConfiguration
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '202':
          description: Delete request was accepted
      summary: Delete an internal managed stream
      tags:
      - managed streams
    get:
      operationId: managedStreamsGetManageByManagerStreamInternalByStreamidConfiguration
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                managedInternalStream:
                  $ref: '#/components/examples/managedInternalStream'
              schema:
                $ref: '#/components/schemas/InternalManagedStream'
          description: managed stream configuration
        '404':
          description: managed stream not found
      summary: Get the configuration for an internal managed stream
      tags:
      - managed streams
    parameters:
    - $ref: '#/components/parameters/Manager'
    - $ref: '#/components/parameters/ManagedInternalStreamId'
    post:
      operationId: managedStreamsPostManageByManagerStreamInternalByStreamidConfiguration
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            examples:
              managedInternalStream:
                $ref: '#/components/examples/managedInternalStream'
            schema:
              $ref: '#/components/schemas/InternalManagedStream'
        required: true
      responses:
        '202':
          description: Configuration was accepted, stream is being created
        '400':
          description: Configuration was rejected
      summary: Create an internal managed stream
      tags:
      - managed streams
  /manage/{manager}/stream/public/{streamId}/configuration:
    delete:
      operationId: managedStreamsDeleteManageByManagerStreamPublicByStreamidConfiguration
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '202':
          description: Delete request was accepted
      summary: Delete a public managed stream
      tags:
      - managed streams
    get:
      operationId: managedStreamsGetManageByManagerStreamPublicByStreamidConfiguration
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                publicManagedStreamWithDefaultKafkaPartitioner:
                  $ref: '#/components/examples/publicManagedStreamWithDefaultKafkaPartitioner'
                publicManagedStreamWithTopicLevelPartitioner:
                  $ref: '#/components/examples/publicManagedStreamWithTopicLevelPartitioner'
              schema:
                $ref: '#/components/schemas/PublicManagedStream'
          description: managed stream configuration
        '404':
          description: managed stream not found
      summary: Get the configuration for a public managed stream
      tags:
      - managed streams
    parameters:
    - $ref: '#/components/parameters/Manager'
    - $ref: '#/components/parameters/ManagedPublicStreamId'
    post:
      operationId: managedStreamsPostManageByManagerStreamPublicByStreamidConfiguration
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            examples:
              publicManagedStreamWithDefaultKafkaPartitioner:
                $ref: '#/components/examples/publicManagedStreamWithDefaultKafkaPartitioner'
              publicManagedStreamWithTopicLevelPartitioner:
                $ref: '#/components/examples/publicManagedStreamWithTopicLevelPartitioner'
            schema:
              $ref: '#/components/schemas/PublicManagedStream'
        required: true
      responses:
        '202':
          description: Configuration was accepted, stream is being created
        '400':
          description: Configuration was rejected
      summary: Create a public managed stream
      tags:
      - managed streams
  /manage/{manager}/stream/{streamId}/access/read:
    get:
      operationId: managedStreamsAccessGetManageByManagerStreamByStreamidAccessRead
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  description: Tenant name
                  example: sometenant
                  type: string
                type: array
          description: A list of all names of tenants that have read access to the
            stream
      summary: get a list of all tenants that have read access to the stream
      tags:
      - managed streams access
    parameters:
    - $ref: '#/components/parameters/Manager'
    - $ref: '#/components/parameters/ManagedStreamId'
  /manage/{manager}/stream/{streamId}/access/read/{tenant}:
    delete:
      operationId: managedStreamsAccessDeleteManageByManagerStreamByStreamidAccessReadByTenant
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '202':
          description: Read access to the stream has been revoked for the tenant
      summary: Revoke read access for the tenant on the stream
      tags:
      - managed streams access
    head:
      operationId: managedStreamsAccessHeadManageByManagerStreamByStreamidAccessReadByTenant
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The tenant has read access to the stream
        '404':
          description: The tenant does not have read access to the stream
      summary: Check whether the tenant has read access to the stream
      tags:
      - managed streams access
    parameters:
    - $ref: '#/components/parameters/Manager'
    - $ref: '#/components/parameters/ManagedStreamId'
    - $ref: '#/components/parameters/Tenant'
    put:
      operationId: managedStreamsAccessPutManageByManagerStreamByStreamidAccessReadByTenant
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '202':
          description: Read access to the stream is granted to the tenant
      summary: Grant the tenant write access to the stream
      tags:
      - managed streams access
  /manage/{manager}/stream/{streamId}/access/write:
    get:
      operationId: managedStreamsAccessGetManageByManagerStreamByStreamidAccessWrite
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  description: Tenant name
                  example: sometenant
                  type: string
                type: array
          description: A list of all names of tenants that have write access to the
            stream
      summary: get a list of all tenants that have write access to the stream
      tags:
      - managed streams access
    parameters:
    - $ref: '#/components/parameters/Manager'
    - $ref: '#/components/parameters/ManagedStreamId'
  /manage/{manager}/stream/{streamId}/access/write/{tenant}:
    delete:
      operationId: managedStreamsAccessDeleteManageByManagerStreamByStreamidAccessWriteByTenant
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '202':
          description: Write access to the stream has been revoked for the tenant
      summary: Revoke write access for the tenant on the stream
      tags:
      - managed streams access
    head:
      operationId: managedStreamsAccessHeadManageByManagerStreamByStreamidAccessWriteByTenant
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The tenant has write access to the stream
        '404':
          description: The tenant does not have write access to the stream
      summary: Check whether the tenant has write access to the stream
      tags:
      - managed streams access
    parameters:
    - $ref: '#/components/parameters/Manager'
    - $ref: '#/components/parameters/ManagedStreamId'
    - $ref: '#/components/parameters/Tenant'
    put:
      operationId: managedStreamsAccessPutManageByManagerStreamByStreamidAccessWriteByTenant
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '202':
          description: Write access to the stream is granted to the tenant
      summary: Grant the tenant write access to the stream
      tags:
      - managed streams access
  /manage/{manager}/tenant:
    get:
      operationId: managedTenantGetManageByManagerTenant
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          $ref: '#/components/responses/200-ChildList'
      summary: returns a list of tenants managed by the `manager` tenant
      tags:
      - managed tenant
    parameters:
    - $ref: '#/components/parameters/Manager'
  /manage/{manager}/tenant/{tenant}/actual:
    get:
      operationId: managedTenantGetManageByManagerTenantByTenantActual
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                managedTenant:
                  $ref: '#/components/examples/managedTenant'
              schema:
                $ref: '#/components/schemas/ManagedTenant'
          description: a JSOn object containing the configuration of a managed tenant
            allocation as it is actually deployed. This may differ from the wanted
            configuration.
      summary: returns the actual state for a managed tenant allocation
      tags:
      - managed tenant
    parameters:
    - $ref: '#/components/parameters/Manager'
    - $ref: '#/components/parameters/Tenant'
  /manage/{manager}/tenant/{tenant}/configuration:
    delete:
      operationId: managedTenantDeleteManageByManagerTenantByTenantConfiguration
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '202':
          description: delete request has been accepted
      summary: deletes a managed tenant for the managing tenant
      tags:
      - managed tenant
    get:
      operationId: managedTenantGetManageByManagerTenantByTenantConfiguration
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                managedTenant:
                  $ref: '#/components/examples/managedTenant'
              schema:
                $ref: '#/components/schemas/ManagedTenant'
          description: a JSON object containing the configuration of a managed tenant
            as it is configured on the current system.  This may differ from the wanted
            configuration.
      summary: returns the configuration of tenant as managed by the manager
      tags:
      - managed tenant
    parameters:
    - $ref: '#/components/parameters/Manager'
    - $ref: '#/components/parameters/Tenant'
    put:
      operationId: managedTenantPutManageByManagerTenantByTenantConfiguration
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            examples:
              managedTenant:
                $ref: '#/components/examples/managedTenant'
            schema:
              $ref: '#/components/schemas/ManagedTenant'
        description: the JSON object containing the configuration of the managed tenant
        required: true
      responses:
        '202':
          description: create/update request has been accepted
        '400':
          description: The provided input was rejected
      summary: creates and/or updates a managed tenant for managing tenant or update
        its configuration
      tags:
      - managed tenant
  /manage/{manager}/tenant/{tenant}/limit:
    get:
      operationId: managedTenantLimitsGetManageByManagerTenantByTenantLimit
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                allLimits:
                  $ref: '#/components/examples/managedTenantLimitListAll'
              schema:
                items:
                  $ref: '#/components/schemas/LimitValue'
                type: array
          description: a JSON list with all limits of the managed tenant
      summary: get all limits of a managed tenant
      tags:
      - managed tenant limits
    parameters:
    - $ref: '#/components/parameters/Manager'
    - $ref: '#/components/parameters/Tenant'
    patch:
      operationId: managedTenantLimitsPatchManageByManagerTenantByTenantLimit
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            examples:
              allLimits:
                $ref: '#/components/examples/managedTenantLimitListAll'
              someLimits:
                $ref: '#/components/examples/managedTenantLimitListSome'
            schema:
              items:
                $ref: '#/components/schemas/LimitValue'
              type: array
        description: a JSON list with multiple limits of the managed tenant
        required: true
      responses:
        '202':
          description: create/update request has been accepted for each limit
        '400':
          description: the provided input was rejected for one or more limits
      summary: update multiple limits of a managed tenant
      tags:
      - managed tenant limits
  /manage/{manager}/tenant/{tenant}/limit/{kind}:
    get:
      operationId: managedTenantLimitsGetManageByManagerTenantByTenantLimitByKind
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                certificatecount:
                  $ref: '#/components/examples/managedTenantLimitCertificateCount'
                consumerrate:
                  $ref: '#/components/examples/managedTenantLimitConsumerRate'
                cpu:
                  $ref: '#/components/examples/managedTenantLimitCpu'
                mem:
                  $ref: '#/components/examples/managedTenantLimitMem'
                partitioncount:
                  $ref: '#/components/examples/managedTenantLimitPartitionCount'
                producerrate:
                  $ref: '#/components/examples/managedTenantLimitProducerRate'
                requestrate:
                  $ref: '#/components/examples/managedTenantLimitRequestRate'
                secretcount:
                  $ref: '#/components/examples/managedTenantLimitSecretCount'
                topiccount:
                  $ref: '#/components/examples/managedTenantLimitTopicCount'
              schema:
                $ref: '#/components/schemas/LimitValue'
          description: a JSON object containing the specified limit kind value of
            a managed tenant
      summary: get a specific managed tenant limit set by the managing tenant
      tags:
      - managed tenant limits
    parameters:
    - $ref: '#/components/parameters/Manager'
    - $ref: '#/components/parameters/Tenant'
    - $ref: '#/components/parameters/LimitKind'
    put:
      operationId: managedTenantLimitsPutManageByManagerTenantByTenantLimitByKind
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            examples:
              certificatecount:
                $ref: '#/components/examples/managedTenantLimitCertificateCount'
              consumerrate:
                $ref: '#/components/examples/managedTenantLimitConsumerRate'
              cpu:
                $ref: '#/components/examples/managedTenantLimitCpu'
              mem:
                $ref: '#/components/examples/managedTenantLimitMem'
              partitioncount:
                $ref: '#/components/examples/managedTenantLimitPartitionCount'
              producerrate:
                $ref: '#/components/examples/managedTenantLimitProducerRate'
              requestrate:
                $ref: '#/components/examples/managedTenantLimitRequestRate'
              secretcount:
                $ref: '#/components/examples/managedTenantLimitSecretCount'
              topiccount:
                $ref: '#/components/examples/managedTenantLimitTopicCount'
            schema:
              $ref: '#/components/schemas/LimitValue'
        description: the JSON object containing the limit configuration of the managed
          tenant
        required: true
      responses:
        '202':
          description: create/update request has been accepted
        '400':
          description: the provided input was rejected
      summary: create and/or update the configured limits for a managed tenant
      tags:
      - managed tenant limits
  /manage/{manager}/tenant/{tenant}/status:
    get:
      operationId: managedTenantGetManageByManagerTenantByTenantStatus
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          $ref: '#/components/responses/200-AllocationStatus'
      summary: returns a brief status description of a managed tenant allocation
      tags:
      - managed tenant
    parameters:
    - $ref: '#/components/parameters/Manager'
    - $ref: '#/components/parameters/Tenant'
  /robot/{tenant}/generate-secret:
    parameters:
    - $ref: '#/components/parameters/Tenant'
    post:
      operationId: robotPostRobotByTenantGenerate-secret
      parameters:
      - deprecated: false
        description: Authorization header (bearer token)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example:
                value: 7c75t59f-8b8b-4ec4-abn5-1dae68f38d4b
              schema:
                $ref: '#/components/schemas/ClientSecret'
          description: "triggers the generation of a new Client Secret for the tenant\u2019\
            s robot account.  __This automatically invalidates the existing client\
            \ secret __, and returns a new client secret in the response body!"
      summary: generate new client secret for a tenant
      tags:
      - robot
security:
- tokenAuth: []
servers:
- url: /resources/v0
tags:
- description: Manage opt-in for data catalog assets.
  name: data catalog
- description: Manage object store resources.
  name: bucket
- description: Manage object store change events.
  name: bucket watch
- description: Manage the sharing of object stores with other tenants and with the
    outside world.
  name: bucket access
- description: Manage access to the object stores of other tenants.
  name: third party bucket
- description: Manage applications.
  name: application
- description: Manage pre-packaged, easily configured apps that you can select from
    the App Catalog.
  name: app catalog
- description: Configure apps you start from the App Catalog.
  name: app catalog app configuration
- description: Query what's in the App Catalog.
  name: app catalog manifest
- description: Manage object store resources.
  name: bucket
- description: Manage object store change events.
  name: bucket watch
- description: Manage the sharing of object stores with other tenants and with the
    outside world.
  name: bucket access
- description: Manage access to the object stores of other tenants.
  name: third party bucket
- description: Manage certificate resources.
  name: certificate
- description: Managed a scalable, PostgreSQL compatible, relational database.
  name: database
- description: Manage opt-in for data catalog assets.
  name: data catalog
- description: Manage a Flink cluster.
  name: flink cluster
- description: Manage Kafka proxies.
  name: kafka proxy
- description: Manage Kafka ACL groups
  name: kafka acl group
- description: Manage other tenants.
  name: managed tenant
- description: Manage the limits of other tenants.
  name: managed tenant limits
- description: Manage public and internal streams.
  name: managed streams
- description: Manage access to streams.
  name: managed streams access
- description: Request and renew Tenant API tokens.
  name: robot
- description: Manage secrets.
  name: secret
- description: Manage Kafka topics.
  name: topic
- description: Manage volumes.
  name: volume
